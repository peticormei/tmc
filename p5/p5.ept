(*
    until => executa o estado em que estÃ¡ e transiciona para outro estado
    unless => transiciona para outro estado e executa o novo estado
*)

type modes = MINIMAL_SAFETY | ECO | COMFORT

node radiator(up1, down1, up2, down2, c1, c2: bool) returns (state_rad, power_rad: int)
let
	automaton
		state Off do
			power_rad = 0;
			state_rad = 0;
		unless up1 or not c1 then FrostProtection

		state FrostProtection do
			power_rad = 300;
			state_rad = 1;
		unless up1 & c1 then Eco
			| down1 or not c1 then Off
			| up2 & c2 then High

		state Eco do
			power_rad = 1500;
			state_rad = 2;
		unless up2 & c2 then High
			| down1 or not c1 then FrostProtection

		state High do
			power_rad = 2000;
			state_rad = 3;
		unless down2 or not c2 then FrostProtection
			| down1 or not c1 then Eco
	end
tel

node washing_machine(end_w, start_w, c_w_machine: bool) returns (state_w_machine, power_w_machine: int)
let
	automaton
		state OFF do
			state_w_machine = 0;
			power_w_machine = 0;
		unless start_w then WATER_FILL

		state WATER_FILL do
			state_w_machine = 1;
			power_w_machine = 15;
		unless end_w & not c_w_machine then STANDBY
			| end_w & c_w_machine then WASHING

		state STANDBY do
			state_w_machine = 2;
			power_w_machine = 0;
		unless c_w_machine then WASHING

		state WASHING do
			state_w_machine = 3;
			power_w_machine = 250;
		unless end_w then RINSE

		state RINSE do
			state_w_machine = 4;
			power_w_machine = 200;
		unless end_w then SPIN

		state SPIN do
			state_w_machine = 5;
			power_w_machine = 800;
		unless end_w then OFF
	end
tel

node oven(finish, start_o, c_oven, cold, temp_ok: bool) returns (state_oven, power_oven: int)
let
	automaton
		state OFF do
			state_oven = 0;
			power_oven = 0;
		unless start_o & not c_oven then STANDBY
			| start_o & c_oven then HEAT

		state STANDBY do
			state_oven = 1;
			power_oven = 0;
		unless c_oven then HEAT

		state HEAT do
			state_oven = 2;
			power_oven = 1500;
		unless temp_ok then MAINTAIN
			| finish then OFF

		state MAINTAIN do
			state_oven = 3;
			power_oven = 300;
		unless cold & c_oven then REHEAT
			| finish then OFF

		state REHEAT do
			state_oven = 4;
			power_oven = 1000;
		unless temp_ok then MAINTAIN
			| finish then OFF
	end
tel

node door(push_door, c_door: bool) returns (door_open: bool)
let
	automaton
		state CLOSED do
			door_open = false;
		unless push_door & c_door then OPEN

		state OPEN do
			door_open = true;
		unless push_door or not c_door then CLOSED
	end
tel

node window(push_window, c_window: bool) returns (window_open: bool)
let
	automaton
		state CLOSED do
			window_open = false;
		unless push_window & c_window then OPEN

		state OPEN do
			window_open = true;
		unless push_window or not c_window then CLOSED
	end
tel

node presence_ctrl(presence: bool) returns (room_oc: bool)
let
	automaton
		state Empty do
			room_oc = false;
		unless presence then Ocupied

		state Ocupied do
			room_oc = true;
		unless not presence then Empty
	end
tel

node device(turn_device, c1_device, c2_device: bool) returns (state_device: bool)
let
	automaton
		state Off do
			state_device = false;
		unless (turn_device & c1_device) or not c2_device then On

		state On do
			state_device = true;
		unless (turn_device & c2_device) or not c1_device then Off
	end
tel

(* node tv(c_tv: bool) returns (state_tv: bool)
let
	automaton
		state Off do
			state_tv = false;
		unless c_tv then On

		state On do
			state_tv = true;
		unless not c_tv then Off
	end
tel *)

node management_ctrl(eco_input, comfort_input: bool) returns (mode: modes)
let
	automaton
		state MINIMAL_SAFETY do
			mode = MINIMAL_SAFETY;
		unless eco_input then ECO
			| comfort_input then COMFORT

		state ECO do
			mode = ECO;
		unless not eco_input then MINIMAL_SAFETY
			| comfort_input then COMFORT

		state COMFORT do
			mode = COMFORT;
		unless not comfort_input then MINIMAL_SAFETY
			| eco_input then ECO
	end
tel

node main(eco_input, comfort_input, presence, up1, down1, up2, down2, end_w, start_w, finish, start_o, cold, temp_ok, push_door, push_window, turn_lamp, turn_tv: bool) returns (state_rad, power_rad, state_w_machine, power_w_machine, state_oven, power_oven: int; room_oc, door_open, window_open, state_lamp, state_tv: bool; actual_policy: modes)
	contract
		var rule1, rule2, rule3, rule4, rule5: bool; total_engergy: int;

	let
		rule1 = not room_oc or (state_lamp or state_tv);
		rule2 = not (not room_oc) or not(door_open or window_open);
		rule3 = not (door_open or window_open) or (state_rad < 2);
		rule4 = not (not room_oc) or not (state_lamp or state_tv)  & (state_rad < 2);

		total_engergy = power_rad + power_w_machine + power_oven;

		switch actual_policy
			| MINIMAL_SAFETY do rule5 = total_engergy <= 3000
			| ECO do rule5 = total_engergy <= 5000
			| COMFORT do rule5 = total_engergy <= 7000
		end
	tel

	enforce (rule1 & rule2 & rule3 & rule4 & rule5)
	with (rad_off, rad_frost, c_w_machine, c_oven, c_door, c_window, c1_tv, c2_tv, c1_lamp, c2_lamp: bool)

let
	actual_policy = inlined management_ctrl(eco_input, comfort_input);
	room_oc = inlined presence_ctrl(presence);

	(state_rad, power_rad) = inlined radiator(up1, down1, up2, down2, rad_off, rad_frost);
	(state_w_machine, power_w_machine) = inlined washing_machine(end_w, start_w, c_w_machine);
	(state_oven, power_oven) = inlined oven(finish, start_o, c_oven, cold, temp_ok);

	door_open = inlined door(push_door, c_door);
	window_open = inlined window(push_window, c_window);

	state_lamp = inlined device(turn_lamp, c1_lamp, c2_lamp);
	state_tv = inlined device(turn_tv, c1_tv, c2_tv);
tel
