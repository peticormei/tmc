type st_8 = St_8_OBSTACLE|St_8_NO_OBSTACLE
type st_7 = St_7_TURNING_STATE|St_7_STURNING_STATE|St_7_MOVING_STATE
type st_6 = St_6_FORWARD_STATE|St_6_BACKWARD_STATE
type st_5 = St_5_FORWARD_STATE|St_5_BACKWARD_STATE
type st_4 = St_4_FORWARD_STATE|St_4_BACKWARD_STATE
type st_3 = St_3_FORWARD_STATE|St_3_BACKWARD_STATE
type st_2 = St_2_TURNING_STATE|St_2_STURNING_STATE|St_2_MOVING_STATE
type st_1 = St_1_FORWARD_STATE|St_1_BACKWARD_STATE
type st = St_OBSTACLE|St_NO_OBSTACLE
node obstacle(sensor : int) returns (out : bool)
var nr_St_NO_OBSTACLE : bool; ns_St_NO_OBSTACLE_1 : bool;
    out_St_NO_OBSTACLE : bool; nr_St_OBSTACLE : bool;
    ns_St_OBSTACLE_1 : bool; out_St_OBSTACLE : bool; ck_1_1 : bool;
    v_1 : bool; v : bool; r_St_NO_OBSTACLE : bool; s_St_NO_OBSTACLE_1 : bool;
    r_St_OBSTACLE : bool; s_St_OBSTACLE_1 : bool; ck_1_2 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  out_St_OBSTACLE = true;
  nr_St_OBSTACLE = false;
  ns_St_OBSTACLE_1 = false;
  out_St_NO_OBSTACLE = false;
  nr_St_NO_OBSTACLE = false;
  ns_St_NO_OBSTACLE_1 = true;
  out = merge ck_1_1 (true -> out_St_NO_OBSTACLE)(false -> out_St_OBSTACLE);
  ns_1 =
    merge ck_1_1 (true -> ns_St_NO_OBSTACLE_1)(false -> ns_St_OBSTACLE_1);
  nr = merge ck_1_1 (true -> nr_St_NO_OBSTACLE)(false -> nr_St_OBSTACLE);
  ck_1_2 = false fby ns_1;
  r_St_OBSTACLE = if v_1 then true else (pnr when false(ck_1_2));
  s_St_OBSTACLE_1 = if v_1 then true else false;
  v_1 = ((sensor when false(ck_1_2)) > 45);
  r_St_NO_OBSTACLE = if v then true else (pnr when true(ck_1_2));
  s_St_NO_OBSTACLE_1 = if v then false else true;
  v = ((sensor when true(ck_1_2)) <= 45);
  s_1 = merge ck_1_2 (true -> s_St_NO_OBSTACLE_1)(false -> s_St_OBSTACLE_1);
  r = merge ck_1_2 (true -> r_St_NO_OBSTACLE)(false -> r_St_OBSTACLE)
tel

node motor(c_motor : bool) returns (mode : bool; velocity : int)
var nr_St_1_BACKWARD_STATE : bool; ns_St_1_BACKWARD_STATE_1 : bool;
    velocity_St_1_BACKWARD_STATE : int; mode_St_1_BACKWARD_STATE : bool;
    nr_St_1_FORWARD_STATE : bool; ns_St_1_FORWARD_STATE_1 : bool;
    velocity_St_1_FORWARD_STATE : int; mode_St_1_FORWARD_STATE : bool;
    ck_2_1 : bool; v : bool; r_St_1_BACKWARD_STATE : bool;
    s_St_1_BACKWARD_STATE_1 : bool; r_St_1_FORWARD_STATE : bool;
    s_St_1_FORWARD_STATE_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool;
    r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  mode_St_1_FORWARD_STATE = true;
  velocity_St_1_FORWARD_STATE = 255;
  nr_St_1_FORWARD_STATE = false;
  ns_St_1_FORWARD_STATE_1 = false;
  mode_St_1_BACKWARD_STATE = false;
  velocity_St_1_BACKWARD_STATE = 100;
  nr_St_1_BACKWARD_STATE = false;
  ns_St_1_BACKWARD_STATE_1 = true;
  mode =
    merge ck_2_1
      (true -> mode_St_1_BACKWARD_STATE)(false -> mode_St_1_FORWARD_STATE);
  velocity =
    merge ck_2_1
      (true -> velocity_St_1_BACKWARD_STATE)
      (false -> velocity_St_1_FORWARD_STATE);
  ns_1 =
    merge ck_2_1
      (true -> ns_St_1_BACKWARD_STATE_1)(false -> ns_St_1_FORWARD_STATE_1);
  nr =
    merge ck_2_1
      (true -> nr_St_1_BACKWARD_STATE)(false -> nr_St_1_FORWARD_STATE);
  ck_1 = false fby ns_1;
  r_St_1_FORWARD_STATE = if v then true else (pnr when false(ck_1));
  s_St_1_FORWARD_STATE_1 = if v then true else false;
  v = not((c_motor when false(ck_1)));
  r_St_1_BACKWARD_STATE =
    if (c_motor when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_1_BACKWARD_STATE_1 = if (c_motor when true(ck_1)) then false else true;
  s_1 =
    merge ck_1
      (true -> s_St_1_BACKWARD_STATE_1)(false -> s_St_1_FORWARD_STATE_1);
  r =
    merge ck_1 (true -> r_St_1_BACKWARD_STATE)(false -> r_St_1_FORWARD_STATE)
tel

node moving_or_turning(c : bool) returns (turning : bool; ombc : int)
var v_5_2_0 : bool; v_5_2_1 : bool; v_6 : bool; v_5_2 : bool; v_5_1 : bool;
    v_4 : bool; v_38 : bool; v_37 : bool; v_36 : bool; v_35 : bool;
    v_34 : bool; v_33 : bool; v_32 : int; v_31 : int; v_30 : bool;
    v_29 : bool; ns_St_2_TURNING_STATE_2_0 : bool;
    ns_St_2_TURNING_STATE_2_1 : bool; ns_St_2_STURNING_STATE_2_0 : bool;
    ns_St_2_STURNING_STATE_2_1 : bool; ns_St_2_MOVING_STATE_2_0 : bool;
    ns_St_2_MOVING_STATE_2_1 : bool; ck_3_2_0 : bool; ck_3_2_1 : bool;
    nr_St_2_TURNING_STATE : bool; ns_St_2_TURNING_STATE_2 : bool;
    ns_St_2_TURNING_STATE_1 : bool; mbc_St_2_TURNING_STATE : int;
    turning_St_2_TURNING_STATE : bool; nr_St_2_STURNING_STATE : bool;
    ns_St_2_STURNING_STATE_2 : bool; ns_St_2_STURNING_STATE_1 : bool;
    mbc_St_2_STURNING_STATE : int; turning_St_2_STURNING_STATE : bool;
    nr_St_2_MOVING_STATE : bool; ns_St_2_MOVING_STATE_2 : bool;
    ns_St_2_MOVING_STATE_1 : bool; mbc_St_2_MOVING_STATE : int;
    turning_St_2_MOVING_STATE : bool; ck_3_2 : bool; ck_3_1 : bool;
    v_3 : bool; v_2 : bool; v : bool; v_46 : bool; v_45 : bool; v_44 : bool;
    v_43 : bool; v_42 : bool; v_41 : bool; v_40 : bool; v_39 : bool;
    s_St_2_TURNING_STATE_2_0 : bool; s_St_2_TURNING_STATE_2_1 : bool;
    s_St_2_STURNING_STATE_2_0 : bool; s_St_2_STURNING_STATE_2_1 : bool;
    s_St_2_MOVING_STATE_2_0 : bool; s_St_2_MOVING_STATE_2_1 : bool;
    ck_2_0 : bool; ck_2_1 : bool; r_St_2_TURNING_STATE : bool;
    s_St_2_TURNING_STATE_2 : bool; s_St_2_TURNING_STATE_1 : bool;
    r_St_2_STURNING_STATE : bool; s_St_2_STURNING_STATE_2 : bool;
    s_St_2_STURNING_STATE_1 : bool; r_St_2_MOVING_STATE : bool;
    s_St_2_MOVING_STATE_2 : bool; s_St_2_MOVING_STATE_1 : bool; ck_2 : bool;
    ck_1 : bool; s_2_0 : bool; s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool;
    s_2 : bool; s_1 : bool; ns_2 : bool; ns_1 : bool; r : bool; nr : bool;
    pnr : bool; mbc : int; mbc_1 : int;
let
  mbc_1 = 0 fby mbc;
  ombc = mbc;
  pnr = false fby nr;
  ck_3_1 = s_1;
  ck_3_2 = s_2;
  mbc_St_2_MOVING_STATE = 0;
  turning_St_2_MOVING_STATE = false;
  nr_St_2_MOVING_STATE = false;
  ns_St_2_MOVING_STATE_1 = true;
  ns_St_2_MOVING_STATE_2 = true;
  mbc_St_2_STURNING_STATE = 0;
  turning_St_2_STURNING_STATE = true;
  nr_St_2_STURNING_STATE = if v_4 then true else v_6;
  ns_St_2_STURNING_STATE_1 = if v_4 then false else v_5_1;
  ns_St_2_STURNING_STATE_2 = if v_4 then false else v_5_2;
  v_6 = if ((c when true(ck_3_1)) when false(ck_3_2_1)) then true else false;
  v_5_1 = if ((c when true(ck_3_1)) when false(ck_3_2_1)) then true else true;
  v_5_2 =
    if ((c when true(ck_3_1)) when false(ck_3_2_1)) then true else false;
  v_4 = not(((c when true(ck_3_1)) when false(ck_3_2_1)));
  v_5_2_1 = (v_5_2 when true(v_5_1));
  v_5_2_0 = (v_5_2 when false(v_5_1));
  mbc_St_2_TURNING_STATE =
    (((mbc_1 when false(ck_3_1)) when false(ck_3_2_0)) + 1);
  turning_St_2_TURNING_STATE = true;
  nr_St_2_TURNING_STATE = false;
  ns_St_2_TURNING_STATE_1 = false;
  ns_St_2_TURNING_STATE_2 = false;
  v_29 =
    merge ck_3_2_1
      (true -> turning_St_2_MOVING_STATE)
      (false -> turning_St_2_STURNING_STATE);
  v_30 =
    merge ck_3_2_0
      (true -> ((true when false(ck_3_1)) when true(ck_3_2_0)))
      (false -> turning_St_2_TURNING_STATE);
  turning = merge ck_3_1 (true -> v_29)(false -> v_30);
  v_31 =
    merge ck_3_2_1
      (true -> mbc_St_2_MOVING_STATE)(false -> mbc_St_2_STURNING_STATE);
  v_32 =
    merge ck_3_2_0
      (true -> ((0 when false(ck_3_1)) when true(ck_3_2_0)))
      (false -> mbc_St_2_TURNING_STATE);
  mbc = merge ck_3_1 (true -> v_31)(false -> v_32);
  v_33 =
    merge ck_3_2_1
      (true -> ns_St_2_MOVING_STATE_1)(false -> ns_St_2_STURNING_STATE_1);
  v_34 =
    merge ck_3_2_1
      (true -> ns_St_2_MOVING_STATE_2)(false -> ns_St_2_STURNING_STATE_2);
  v_35 =
    merge ck_3_2_0
      (true -> ((true when false(ck_3_1)) when true(ck_3_2_0)))
      (false -> ns_St_2_TURNING_STATE_1);
  v_36 =
    merge ck_3_2_0
      (true -> ((true when false(ck_3_1)) when true(ck_3_2_0)))
      (false -> ns_St_2_TURNING_STATE_2);
  ns_1 = merge ck_3_1 (true -> v_33)(false -> v_35);
  ns_2 = merge ck_3_1 (true -> v_34)(false -> v_36);
  v_37 =
    merge ck_3_2_1
      (true -> nr_St_2_MOVING_STATE)(false -> nr_St_2_STURNING_STATE);
  v_38 =
    merge ck_3_2_0
      (true -> ((true when false(ck_3_1)) when true(ck_3_2_0)))
      (false -> nr_St_2_TURNING_STATE);
  nr = merge ck_3_1 (true -> v_37)(false -> v_38);
  ck_3_2_1 = (ck_3_2 when true(ck_3_1));
  ck_3_2_0 = (ck_3_2 when false(ck_3_1));
  ns_St_2_MOVING_STATE_2_1 =
    (ns_St_2_MOVING_STATE_2 when true(ns_St_2_MOVING_STATE_1));
  ns_St_2_MOVING_STATE_2_0 =
    (ns_St_2_MOVING_STATE_2 when false(ns_St_2_MOVING_STATE_1));
  ns_St_2_STURNING_STATE_2_1 =
    (ns_St_2_STURNING_STATE_2 when true(ns_St_2_STURNING_STATE_1));
  ns_St_2_STURNING_STATE_2_0 =
    (ns_St_2_STURNING_STATE_2 when false(ns_St_2_STURNING_STATE_1));
  ns_St_2_TURNING_STATE_2_1 =
    (ns_St_2_TURNING_STATE_2 when true(ns_St_2_TURNING_STATE_1));
  ns_St_2_TURNING_STATE_2_0 =
    (ns_St_2_TURNING_STATE_2 when false(ns_St_2_TURNING_STATE_1));
  v_39 = true fby ns_1;
  v_40 = true fby ns_2;
  ck_1 = v_39;
  ck_2 = v_40;
  r_St_2_MOVING_STATE =
    if v_3 then true else ((pnr when true(ck_1)) when true(ck_2_1));
  s_St_2_MOVING_STATE_1 = if v_3 then true else true;
  s_St_2_MOVING_STATE_2 = if v_3 then false else true;
  v_3 = not(((c when true(ck_1)) when true(ck_2_1)));
  r_St_2_STURNING_STATE = ((pnr when true(ck_1)) when false(ck_2_1));
  s_St_2_STURNING_STATE_1 = true;
  s_St_2_STURNING_STATE_2 = false;
  r_St_2_TURNING_STATE =
    if v_2 then true else ((pnr when false(ck_1)) when false(ck_2_0));
  s_St_2_TURNING_STATE_1 = if v_2 then true else false;
  s_St_2_TURNING_STATE_2 = if v_2 then false else false;
  v_2 = (((c when false(ck_1)) when false(ck_2_0)) & v);
  v = (12 = ((mbc_1 when false(ck_1)) when false(ck_2_0)));
  v_41 =
    merge ck_2_1
      (true -> s_St_2_MOVING_STATE_1)(false -> s_St_2_STURNING_STATE_1);
  v_42 =
    merge ck_2_1
      (true -> s_St_2_MOVING_STATE_2)(false -> s_St_2_STURNING_STATE_2);
  v_43 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_2_TURNING_STATE_1);
  v_44 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_2_TURNING_STATE_2);
  s_1 = merge ck_1 (true -> v_41)(false -> v_43);
  s_2 = merge ck_1 (true -> v_42)(false -> v_44);
  v_45 =
    merge ck_2_1
      (true -> r_St_2_MOVING_STATE)(false -> r_St_2_STURNING_STATE);
  v_46 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_St_2_TURNING_STATE);
  r = merge ck_1 (true -> v_45)(false -> v_46);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_St_2_MOVING_STATE_2_1 =
    (s_St_2_MOVING_STATE_2 when true(s_St_2_MOVING_STATE_1));
  s_St_2_MOVING_STATE_2_0 =
    (s_St_2_MOVING_STATE_2 when false(s_St_2_MOVING_STATE_1));
  s_St_2_STURNING_STATE_2_1 =
    (s_St_2_STURNING_STATE_2 when true(s_St_2_STURNING_STATE_1));
  s_St_2_STURNING_STATE_2_0 =
    (s_St_2_STURNING_STATE_2 when false(s_St_2_STURNING_STATE_1));
  s_St_2_TURNING_STATE_2_1 =
    (s_St_2_TURNING_STATE_2 when true(s_St_2_TURNING_STATE_1));
  s_St_2_TURNING_STATE_2_0 =
    (s_St_2_TURNING_STATE_2 when false(s_St_2_TURNING_STATE_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node controller(obs_sensor : int)
returns (obs : bool; turning : bool; motor1 : bool; motor2 : bool;
          motor3 : bool; motor4 : bool; cont : int; vel1 : int; vel2 : int;
          vel3 : int; vel4 : int)
contract
  var rule : bool; v : bool; v_7 : bool; v_8 : bool; v_9 : bool; v_10 : bool;
      v_11 : bool; v_12 : bool; v_13 : bool; v_14 : bool; v_15 : bool;
      v_16 : bool;
  let
    v = not(obs);
    v_7 = not(turning);
    v_8 = (v & v_7);
    v_9 = (motor1 = true);
    v_10 = (motor2 = false);
    v_11 = (v_9 & v_10);
    v_12 = (motor3 = true);
    v_13 = (v_11 & v_12);
    v_14 = (motor4 = false);
    v_15 = (v_13 & v_14);
    v_16 = (turning & v_15);
    rule = (v_8 or v_16)
  tel
  assume true@ enforce rule]
                 with (c_motor4 : bool; c_motor3 : bool; c_motor2 : bool;
                        c_motor1 : bool; c_move : bool)
                 var nr_St_3_BACKWARD_STATE : bool;
                     ns_St_3_BACKWARD_STATE_1 : bool;
                     velocity_3_St_3_BACKWARD_STATE : int;
                     mode_3_St_3_BACKWARD_STATE : bool;
                     nr_St_3_FORWARD_STATE : bool;
                     ns_St_3_FORWARD_STATE_1 : bool;
                     velocity_3_St_3_FORWARD_STATE : int;
                     mode_3_St_3_FORWARD_STATE : bool; ck_14_1 : bool;
                     v_28 : bool; r_St_3_BACKWARD_STATE : bool;
                     s_St_3_BACKWARD_STATE_1 : bool;
                     r_St_3_FORWARD_STATE : bool;
                     s_St_3_FORWARD_STATE_1 : bool; ck_13_1 : bool;
                     nr_1_St_4_BACKWARD_STATE : bool;
                     ns_1_St_4_BACKWARD_STATE_1 : bool;
                     velocity_2_St_4_BACKWARD_STATE : int;
                     mode_2_St_4_BACKWARD_STATE : bool;
                     nr_1_St_4_FORWARD_STATE : bool;
                     ns_1_St_4_FORWARD_STATE_1 : bool;
                     velocity_2_St_4_FORWARD_STATE : int;
                     mode_2_St_4_FORWARD_STATE : bool; ck_12_1 : bool;
                     v_27 : bool; r_1_St_4_BACKWARD_STATE : bool;
                     s_1_St_4_BACKWARD_STATE_1 : bool;
                     r_1_St_4_FORWARD_STATE : bool;
                     s_1_St_4_FORWARD_STATE_1 : bool; ck_11_1 : bool;
                     nr_2_St_5_BACKWARD_STATE : bool;
                     ns_2_St_5_BACKWARD_STATE_1 : bool;
                     velocity_1_St_5_BACKWARD_STATE : int;
                     mode_1_St_5_BACKWARD_STATE : bool;
                     nr_2_St_5_FORWARD_STATE : bool;
                     ns_2_St_5_FORWARD_STATE_1 : bool;
                     velocity_1_St_5_FORWARD_STATE : int;
                     mode_1_St_5_FORWARD_STATE : bool; ck_10_1 : bool;
                     v_26 : bool; r_2_St_5_BACKWARD_STATE : bool;
                     s_2_St_5_BACKWARD_STATE_1 : bool;
                     r_2_St_5_FORWARD_STATE : bool;
                     s_2_St_5_FORWARD_STATE_1 : bool; ck_9_1 : bool;
                     nr_3_St_6_BACKWARD_STATE : bool;
                     ns_3_St_6_BACKWARD_STATE_1 : bool;
                     velocity_St_6_BACKWARD_STATE : int;
                     mode_St_6_BACKWARD_STATE : bool;
                     nr_3_St_6_FORWARD_STATE : bool;
                     ns_3_St_6_FORWARD_STATE_1 : bool;
                     velocity_St_6_FORWARD_STATE : int;
                     mode_St_6_FORWARD_STATE : bool; ck_8_1 : bool;
                     v_25 : bool; r_3_St_6_BACKWARD_STATE : bool;
                     s_3_St_6_BACKWARD_STATE_1 : bool;
                     r_3_St_6_FORWARD_STATE : bool;
                     s_3_St_6_FORWARD_STATE_1 : bool; ck_7_1 : bool;
                     v_23_2_0 : bool; v_23_2_1 : bool; v_24 : bool;
                     v_23_2 : bool; v_23_1 : bool; v_22 : bool; v_56 : bool;
                     v_55 : bool; v_54 : bool; v_53 : bool; v_52 : bool;
                     v_51 : bool; v_50 : int; v_49 : int; v_48 : bool;
                     v_47 : bool; ns_4_St_7_TURNING_STATE_2_0 : bool;
                     ns_4_St_7_TURNING_STATE_2_1 : bool;
                     ns_4_St_7_STURNING_STATE_2_0 : bool;
                     ns_4_St_7_STURNING_STATE_2_1 : bool;
                     ns_4_St_7_MOVING_STATE_2_0 : bool;
                     ns_4_St_7_MOVING_STATE_2_1 : bool; ck_6_2_0 : bool;
                     ck_6_2_1 : bool; nr_4_St_7_TURNING_STATE : bool;
                     ns_4_St_7_TURNING_STATE_2 : bool;
                     ns_4_St_7_TURNING_STATE_1 : bool;
                     mbc_St_7_TURNING_STATE : int;
                     turning_1_St_7_TURNING_STATE : bool;
                     nr_4_St_7_STURNING_STATE : bool;
                     ns_4_St_7_STURNING_STATE_2 : bool;
                     ns_4_St_7_STURNING_STATE_1 : bool;
                     mbc_St_7_STURNING_STATE : int;
                     turning_1_St_7_STURNING_STATE : bool;
                     nr_4_St_7_MOVING_STATE : bool;
                     ns_4_St_7_MOVING_STATE_2 : bool;
                     ns_4_St_7_MOVING_STATE_1 : bool;
                     mbc_St_7_MOVING_STATE : int;
                     turning_1_St_7_MOVING_STATE : bool; ck_6_2 : bool;
                     ck_6_1 : bool; v_21 : bool; v_20 : bool; v_19 : bool;
                     v_64 : bool; v_63 : bool; v_62 : bool; v_61 : bool;
                     v_60 : bool; v_59 : bool; v_58 : bool; v_57 : bool;
                     s_4_St_7_TURNING_STATE_2_0 : bool;
                     s_4_St_7_TURNING_STATE_2_1 : bool;
                     s_4_St_7_STURNING_STATE_2_0 : bool;
                     s_4_St_7_STURNING_STATE_2_1 : bool;
                     s_4_St_7_MOVING_STATE_2_0 : bool;
                     s_4_St_7_MOVING_STATE_2_1 : bool; ck_5_2_0 : bool;
                     ck_5_2_1 : bool; r_4_St_7_TURNING_STATE : bool;
                     s_4_St_7_TURNING_STATE_2 : bool;
                     s_4_St_7_TURNING_STATE_1 : bool;
                     r_4_St_7_STURNING_STATE : bool;
                     s_4_St_7_STURNING_STATE_2 : bool;
                     s_4_St_7_STURNING_STATE_1 : bool;
                     r_4_St_7_MOVING_STATE : bool;
                     s_4_St_7_MOVING_STATE_2 : bool;
                     s_4_St_7_MOVING_STATE_1 : bool; ck_5_2 : bool;
                     ck_5_1 : bool; nr_5_St_8_NO_OBSTACLE : bool;
                     ns_5_St_8_NO_OBSTACLE_1 : bool;
                     out_St_8_NO_OBSTACLE : bool; nr_5_St_8_OBSTACLE : bool;
                     ns_5_St_8_OBSTACLE_1 : bool; out_St_8_OBSTACLE : bool;
                     ck_4_1 : bool; v_18 : bool; v_17 : bool;
                     r_5_St_8_NO_OBSTACLE : bool;
                     s_5_St_8_NO_OBSTACLE_1 : bool; r_5_St_8_OBSTACLE : bool;
                     s_5_St_8_OBSTACLE_1 : bool; ck_1 : bool; s_4_2_0 : bool;
                     s_4_2_1 : bool; ns_4_2_0 : bool; ns_4_2_1 : bool;
                     s_5_1 : bool; ns_5_1 : bool; r_5 : bool; nr_5 : bool;
                     pnr_5 : bool; s_4_2 : bool; s_4_1 : bool; ns_4_2 : bool;
                     ns_4_1 : bool; r_4 : bool; nr_4 : bool; pnr_4 : bool;
                     s_3_1 : bool; ns_3_1 : bool; r_3 : bool; nr_3 : bool;
                     pnr_3 : bool; s_2_1 : bool; ns_2_1 : bool; r_2 : bool;
                     nr_2 : bool; pnr_2 : bool; s_1_1 : bool; ns_1_1 : bool;
                     r_1 : bool; nr_1 : bool; pnr_1 : bool; s_1_2 : bool;
                     ns_1_2 : bool; r : bool; nr : bool; pnr : bool;
                     c_motor_3 : bool; mode_3 : bool; velocity_3 : int;
                     c_motor_2 : bool; mode_2 : bool; velocity_2 : int;
                     c_motor_1 : bool; mode_1 : bool; velocity_1 : int;
                     c_motor : bool; mode : bool; velocity : int; c : bool;
                     mbc : int; turning_1 : bool; ombc : int; sensor : int;
                     out : bool; mbc_2 : int;
  let
    mbc_2 = 0 fby mbc;
    c_motor_3 = c_motor4;
    pnr = false fby nr;
    ck_14_1 = s_1_2;
    mode_3_St_3_FORWARD_STATE = true;
    velocity_3_St_3_FORWARD_STATE = 255;
    nr_St_3_FORWARD_STATE = false;
    ns_St_3_FORWARD_STATE_1 = false;
    mode_3_St_3_BACKWARD_STATE = false;
    velocity_3_St_3_BACKWARD_STATE = 100;
    nr_St_3_BACKWARD_STATE = false;
    ns_St_3_BACKWARD_STATE_1 = true;
    mode_3 =
      merge ck_14_1
        (true -> mode_3_St_3_BACKWARD_STATE)
        (false -> mode_3_St_3_FORWARD_STATE);
    velocity_3 =
      merge ck_14_1
        (true -> velocity_3_St_3_BACKWARD_STATE)
        (false -> velocity_3_St_3_FORWARD_STATE);
    ns_1_2 =
      merge ck_14_1
        (true -> ns_St_3_BACKWARD_STATE_1)(false -> ns_St_3_FORWARD_STATE_1);
    nr =
      merge ck_14_1
        (true -> nr_St_3_BACKWARD_STATE)(false -> nr_St_3_FORWARD_STATE);
    ck_13_1 = false fby ns_1_2;
    r_St_3_FORWARD_STATE = if v_28 then true else (pnr when false(ck_13_1));
    s_St_3_FORWARD_STATE_1 = if v_28 then true else false;
    v_28 = not((c_motor_3 when false(ck_13_1)));
    r_St_3_BACKWARD_STATE =
      if (c_motor_3 when true(ck_13_1))
      then true
      else (pnr when true(ck_13_1));
    s_St_3_BACKWARD_STATE_1 =
      if (c_motor_3 when true(ck_13_1)) then false else true;
    s_1_2 =
      merge ck_13_1
        (true -> s_St_3_BACKWARD_STATE_1)(false -> s_St_3_FORWARD_STATE_1);
    r =
      merge ck_13_1
        (true -> r_St_3_BACKWARD_STATE)(false -> r_St_3_FORWARD_STATE);
    c_motor_2 = c_motor3;
    pnr_1 = false fby nr_1;
    ck_12_1 = s_1_1;
    mode_2_St_4_FORWARD_STATE = true;
    velocity_2_St_4_FORWARD_STATE = 255;
    nr_1_St_4_FORWARD_STATE = false;
    ns_1_St_4_FORWARD_STATE_1 = false;
    mode_2_St_4_BACKWARD_STATE = false;
    velocity_2_St_4_BACKWARD_STATE = 100;
    nr_1_St_4_BACKWARD_STATE = false;
    ns_1_St_4_BACKWARD_STATE_1 = true;
    mode_2 =
      merge ck_12_1
        (true -> mode_2_St_4_BACKWARD_STATE)
        (false -> mode_2_St_4_FORWARD_STATE);
    velocity_2 =
      merge ck_12_1
        (true -> velocity_2_St_4_BACKWARD_STATE)
        (false -> velocity_2_St_4_FORWARD_STATE);
    ns_1_1 =
      merge ck_12_1
        (true -> ns_1_St_4_BACKWARD_STATE_1)
        (false -> ns_1_St_4_FORWARD_STATE_1);
    nr_1 =
      merge ck_12_1
        (true -> nr_1_St_4_BACKWARD_STATE)(false -> nr_1_St_4_FORWARD_STATE);
    ck_11_1 = false fby ns_1_1;
    r_1_St_4_FORWARD_STATE =
      if v_27 then true else (pnr_1 when false(ck_11_1));
    s_1_St_4_FORWARD_STATE_1 = if v_27 then true else false;
    v_27 = not((c_motor_2 when false(ck_11_1)));
    r_1_St_4_BACKWARD_STATE =
      if (c_motor_2 when true(ck_11_1))
      then true
      else (pnr_1 when true(ck_11_1));
    s_1_St_4_BACKWARD_STATE_1 =
      if (c_motor_2 when true(ck_11_1)) then false else true;
    s_1_1 =
      merge ck_11_1
        (true -> s_1_St_4_BACKWARD_STATE_1)
        (false -> s_1_St_4_FORWARD_STATE_1);
    r_1 =
      merge ck_11_1
        (true -> r_1_St_4_BACKWARD_STATE)(false -> r_1_St_4_FORWARD_STATE);
    c_motor_1 = c_motor2;
    pnr_2 = false fby nr_2;
    ck_10_1 = s_2_1;
    mode_1_St_5_FORWARD_STATE = true;
    velocity_1_St_5_FORWARD_STATE = 255;
    nr_2_St_5_FORWARD_STATE = false;
    ns_2_St_5_FORWARD_STATE_1 = false;
    mode_1_St_5_BACKWARD_STATE = false;
    velocity_1_St_5_BACKWARD_STATE = 100;
    nr_2_St_5_BACKWARD_STATE = false;
    ns_2_St_5_BACKWARD_STATE_1 = true;
    mode_1 =
      merge ck_10_1
        (true -> mode_1_St_5_BACKWARD_STATE)
        (false -> mode_1_St_5_FORWARD_STATE);
    velocity_1 =
      merge ck_10_1
        (true -> velocity_1_St_5_BACKWARD_STATE)
        (false -> velocity_1_St_5_FORWARD_STATE);
    ns_2_1 =
      merge ck_10_1
        (true -> ns_2_St_5_BACKWARD_STATE_1)
        (false -> ns_2_St_5_FORWARD_STATE_1);
    nr_2 =
      merge ck_10_1
        (true -> nr_2_St_5_BACKWARD_STATE)(false -> nr_2_St_5_FORWARD_STATE);
    ck_9_1 = false fby ns_2_1;
    r_2_St_5_FORWARD_STATE =
      if v_26 then true else (pnr_2 when false(ck_9_1));
    s_2_St_5_FORWARD_STATE_1 = if v_26 then true else false;
    v_26 = not((c_motor_1 when false(ck_9_1)));
    r_2_St_5_BACKWARD_STATE =
      if (c_motor_1 when true(ck_9_1))
      then true
      else (pnr_2 when true(ck_9_1));
    s_2_St_5_BACKWARD_STATE_1 =
      if (c_motor_1 when true(ck_9_1)) then false else true;
    s_2_1 =
      merge ck_9_1
        (true -> s_2_St_5_BACKWARD_STATE_1)
        (false -> s_2_St_5_FORWARD_STATE_1);
    r_2 =
      merge ck_9_1
        (true -> r_2_St_5_BACKWARD_STATE)(false -> r_2_St_5_FORWARD_STATE);
    c_motor = c_motor1;
    pnr_3 = false fby nr_3;
    ck_8_1 = s_3_1;
    mode_St_6_FORWARD_STATE = true;
    velocity_St_6_FORWARD_STATE = 255;
    nr_3_St_6_FORWARD_STATE = false;
    ns_3_St_6_FORWARD_STATE_1 = false;
    mode_St_6_BACKWARD_STATE = false;
    velocity_St_6_BACKWARD_STATE = 100;
    nr_3_St_6_BACKWARD_STATE = false;
    ns_3_St_6_BACKWARD_STATE_1 = true;
    mode =
      merge ck_8_1
        (true -> mode_St_6_BACKWARD_STATE)(false -> mode_St_6_FORWARD_STATE);
    velocity =
      merge ck_8_1
        (true -> velocity_St_6_BACKWARD_STATE)
        (false -> velocity_St_6_FORWARD_STATE);
    ns_3_1 =
      merge ck_8_1
        (true -> ns_3_St_6_BACKWARD_STATE_1)
        (false -> ns_3_St_6_FORWARD_STATE_1);
    nr_3 =
      merge ck_8_1
        (true -> nr_3_St_6_BACKWARD_STATE)(false -> nr_3_St_6_FORWARD_STATE);
    ck_7_1 = false fby ns_3_1;
    r_3_St_6_FORWARD_STATE =
      if v_25 then true else (pnr_3 when false(ck_7_1));
    s_3_St_6_FORWARD_STATE_1 = if v_25 then true else false;
    v_25 = not((c_motor when false(ck_7_1)));
    r_3_St_6_BACKWARD_STATE =
      if (c_motor when true(ck_7_1)) then true else (pnr_3 when true(ck_7_1));
    s_3_St_6_BACKWARD_STATE_1 =
      if (c_motor when true(ck_7_1)) then false else true;
    s_3_1 =
      merge ck_7_1
        (true -> s_3_St_6_BACKWARD_STATE_1)
        (false -> s_3_St_6_FORWARD_STATE_1);
    r_3 =
      merge ck_7_1
        (true -> r_3_St_6_BACKWARD_STATE)(false -> r_3_St_6_FORWARD_STATE);
    c = c_move;
    ombc = mbc;
    pnr_4 = false fby nr_4;
    ck_6_1 = s_4_1;
    ck_6_2 = s_4_2;
    mbc_St_7_MOVING_STATE = 0;
    turning_1_St_7_MOVING_STATE = false;
    nr_4_St_7_MOVING_STATE = false;
    ns_4_St_7_MOVING_STATE_1 = true;
    ns_4_St_7_MOVING_STATE_2 = true;
    mbc_St_7_STURNING_STATE = 0;
    turning_1_St_7_STURNING_STATE = true;
    nr_4_St_7_STURNING_STATE = if v_22 then true else v_24;
    ns_4_St_7_STURNING_STATE_1 = if v_22 then false else v_23_1;
    ns_4_St_7_STURNING_STATE_2 = if v_22 then false else v_23_2;
    v_24 =
      if ((c when true(ck_6_1)) when false(ck_6_2_1)) then true else false;
    v_23_1 =
      if ((c when true(ck_6_1)) when false(ck_6_2_1)) then true else true;
    v_23_2 =
      if ((c when true(ck_6_1)) when false(ck_6_2_1)) then true else false;
    v_22 = not(((c when true(ck_6_1)) when false(ck_6_2_1)));
    v_23_2_1 = (v_23_2 when true(v_23_1));
    v_23_2_0 = (v_23_2 when false(v_23_1));
    mbc_St_7_TURNING_STATE =
      (((mbc_2 when false(ck_6_1)) when false(ck_6_2_0)) + 1);
    turning_1_St_7_TURNING_STATE = true;
    nr_4_St_7_TURNING_STATE = false;
    ns_4_St_7_TURNING_STATE_1 = false;
    ns_4_St_7_TURNING_STATE_2 = false;
    v_47 =
      merge ck_6_2_1
        (true -> turning_1_St_7_MOVING_STATE)
        (false -> turning_1_St_7_STURNING_STATE);
    v_48 =
      merge ck_6_2_0
        (true -> ((true when false(ck_6_1)) when true(ck_6_2_0)))
        (false -> turning_1_St_7_TURNING_STATE);
    turning_1 = merge ck_6_1 (true -> v_47)(false -> v_48);
    v_49 =
      merge ck_6_2_1
        (true -> mbc_St_7_MOVING_STATE)(false -> mbc_St_7_STURNING_STATE);
    v_50 =
      merge ck_6_2_0
        (true -> ((0 when false(ck_6_1)) when true(ck_6_2_0)))
        (false -> mbc_St_7_TURNING_STATE);
    mbc = merge ck_6_1 (true -> v_49)(false -> v_50);
    v_51 =
      merge ck_6_2_1
        (true -> ns_4_St_7_MOVING_STATE_1)
        (false -> ns_4_St_7_STURNING_STATE_1);
    v_52 =
      merge ck_6_2_1
        (true -> ns_4_St_7_MOVING_STATE_2)
        (false -> ns_4_St_7_STURNING_STATE_2);
    v_53 =
      merge ck_6_2_0
        (true -> ((true when false(ck_6_1)) when true(ck_6_2_0)))
        (false -> ns_4_St_7_TURNING_STATE_1);
    v_54 =
      merge ck_6_2_0
        (true -> ((true when false(ck_6_1)) when true(ck_6_2_0)))
        (false -> ns_4_St_7_TURNING_STATE_2);
    ns_4_1 = merge ck_6_1 (true -> v_51)(false -> v_53);
    ns_4_2 = merge ck_6_1 (true -> v_52)(false -> v_54);
    v_55 =
      merge ck_6_2_1
        (true -> nr_4_St_7_MOVING_STATE)(false -> nr_4_St_7_STURNING_STATE);
    v_56 =
      merge ck_6_2_0
        (true -> ((true when false(ck_6_1)) when true(ck_6_2_0)))
        (false -> nr_4_St_7_TURNING_STATE);
    nr_4 = merge ck_6_1 (true -> v_55)(false -> v_56);
    ck_6_2_1 = (ck_6_2 when true(ck_6_1));
    ck_6_2_0 = (ck_6_2 when false(ck_6_1));
    ns_4_St_7_MOVING_STATE_2_1 =
      (ns_4_St_7_MOVING_STATE_2 when true(ns_4_St_7_MOVING_STATE_1));
    ns_4_St_7_MOVING_STATE_2_0 =
      (ns_4_St_7_MOVING_STATE_2 when false(ns_4_St_7_MOVING_STATE_1));
    ns_4_St_7_STURNING_STATE_2_1 =
      (ns_4_St_7_STURNING_STATE_2 when true(ns_4_St_7_STURNING_STATE_1));
    ns_4_St_7_STURNING_STATE_2_0 =
      (ns_4_St_7_STURNING_STATE_2 when false(ns_4_St_7_STURNING_STATE_1));
    ns_4_St_7_TURNING_STATE_2_1 =
      (ns_4_St_7_TURNING_STATE_2 when true(ns_4_St_7_TURNING_STATE_1));
    ns_4_St_7_TURNING_STATE_2_0 =
      (ns_4_St_7_TURNING_STATE_2 when false(ns_4_St_7_TURNING_STATE_1));
    v_57 = true fby ns_4_1;
    v_58 = true fby ns_4_2;
    ck_5_1 = v_57;
    ck_5_2 = v_58;
    r_4_St_7_MOVING_STATE =
      if v_21 then true else ((pnr_4 when true(ck_5_1)) when true(ck_5_2_1));
    s_4_St_7_MOVING_STATE_1 = if v_21 then true else true;
    s_4_St_7_MOVING_STATE_2 = if v_21 then false else true;
    v_21 = not(((c when true(ck_5_1)) when true(ck_5_2_1)));
    r_4_St_7_STURNING_STATE =
      ((pnr_4 when true(ck_5_1)) when false(ck_5_2_1));
    s_4_St_7_STURNING_STATE_1 = true;
    s_4_St_7_STURNING_STATE_2 = false;
    r_4_St_7_TURNING_STATE =
      if v_20
      then true
      else ((pnr_4 when false(ck_5_1)) when false(ck_5_2_0));
    s_4_St_7_TURNING_STATE_1 = if v_20 then true else false;
    s_4_St_7_TURNING_STATE_2 = if v_20 then false else false;
    v_20 = (((c when false(ck_5_1)) when false(ck_5_2_0)) & v_19);
    v_19 = (12 = ((mbc_2 when false(ck_5_1)) when false(ck_5_2_0)));
    v_59 =
      merge ck_5_2_1
        (true -> s_4_St_7_MOVING_STATE_1)(false -> s_4_St_7_STURNING_STATE_1);
    v_60 =
      merge ck_5_2_1
        (true -> s_4_St_7_MOVING_STATE_2)(false -> s_4_St_7_STURNING_STATE_2);
    v_61 =
      merge ck_5_2_0
        (true -> ((true when false(ck_5_1)) when true(ck_5_2_0)))
        (false -> s_4_St_7_TURNING_STATE_1);
    v_62 =
      merge ck_5_2_0
        (true -> ((true when false(ck_5_1)) when true(ck_5_2_0)))
        (false -> s_4_St_7_TURNING_STATE_2);
    s_4_1 = merge ck_5_1 (true -> v_59)(false -> v_61);
    s_4_2 = merge ck_5_1 (true -> v_60)(false -> v_62);
    v_63 =
      merge ck_5_2_1
        (true -> r_4_St_7_MOVING_STATE)(false -> r_4_St_7_STURNING_STATE);
    v_64 =
      merge ck_5_2_0
        (true -> ((true when false(ck_5_1)) when true(ck_5_2_0)))
        (false -> r_4_St_7_TURNING_STATE);
    r_4 = merge ck_5_1 (true -> v_63)(false -> v_64);
    ck_5_2_1 = (ck_5_2 when true(ck_5_1));
    ck_5_2_0 = (ck_5_2 when false(ck_5_1));
    s_4_St_7_MOVING_STATE_2_1 =
      (s_4_St_7_MOVING_STATE_2 when true(s_4_St_7_MOVING_STATE_1));
    s_4_St_7_MOVING_STATE_2_0 =
      (s_4_St_7_MOVING_STATE_2 when false(s_4_St_7_MOVING_STATE_1));
    s_4_St_7_STURNING_STATE_2_1 =
      (s_4_St_7_STURNING_STATE_2 when true(s_4_St_7_STURNING_STATE_1));
    s_4_St_7_STURNING_STATE_2_0 =
      (s_4_St_7_STURNING_STATE_2 when false(s_4_St_7_STURNING_STATE_1));
    s_4_St_7_TURNING_STATE_2_1 =
      (s_4_St_7_TURNING_STATE_2 when true(s_4_St_7_TURNING_STATE_1));
    s_4_St_7_TURNING_STATE_2_0 =
      (s_4_St_7_TURNING_STATE_2 when false(s_4_St_7_TURNING_STATE_1));
    sensor = obs_sensor;
    pnr_5 = false fby nr_5;
    ck_4_1 = s_5_1;
    out_St_8_OBSTACLE = true;
    nr_5_St_8_OBSTACLE = false;
    ns_5_St_8_OBSTACLE_1 = false;
    out_St_8_NO_OBSTACLE = false;
    nr_5_St_8_NO_OBSTACLE = false;
    ns_5_St_8_NO_OBSTACLE_1 = true;
    out =
      merge ck_4_1 (true -> out_St_8_NO_OBSTACLE)(false -> out_St_8_OBSTACLE);
    ns_5_1 =
      merge ck_4_1
        (true -> ns_5_St_8_NO_OBSTACLE_1)(false -> ns_5_St_8_OBSTACLE_1);
    nr_5 =
      merge ck_4_1
        (true -> nr_5_St_8_NO_OBSTACLE)(false -> nr_5_St_8_OBSTACLE);
    ck_1 = false fby ns_5_1;
    r_5_St_8_OBSTACLE = if v_18 then true else (pnr_5 when false(ck_1));
    s_5_St_8_OBSTACLE_1 = if v_18 then true else false;
    v_18 = ((sensor when false(ck_1)) > 45);
    r_5_St_8_NO_OBSTACLE = if v_17 then true else (pnr_5 when true(ck_1));
    s_5_St_8_NO_OBSTACLE_1 = if v_17 then false else true;
    v_17 = ((sensor when true(ck_1)) <= 45);
    s_5_1 =
      merge ck_1
        (true -> s_5_St_8_NO_OBSTACLE_1)(false -> s_5_St_8_OBSTACLE_1);
    r_5 =
      merge ck_1 (true -> r_5_St_8_NO_OBSTACLE)(false -> r_5_St_8_OBSTACLE);
    obs = out;
    cont = ombc;
    turning = turning_1;
    vel1 = velocity;
    motor1 = mode;
    vel2 = velocity_1;
    motor2 = mode_1;
    vel3 = velocity_2;
    motor3 = mode_2;
    vel4 = velocity_3;
    motor4 = mode_3;
    ns_4_2_1 = (ns_4_2 when true(ns_4_1));
    ns_4_2_0 = (ns_4_2 when false(ns_4_1));
    s_4_2_1 = (s_4_2 when true(s_4_1));
    s_4_2_0 = (s_4_2 when false(s_4_1))
  tel

