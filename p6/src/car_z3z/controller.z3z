% --- Generated the 14/10/2019 at 14:12 --- %
% --- heptagon compiler, version 1.03.00 (compiled mon. oct. 14 13:8:41 CET 2019) --- %
% --- Command line: /home/opam/.opam/4.02/bin/heptc -target c -target z3z -s controller car.ept --- %

set_reorder(2);read("Property.lib");read("Synthesis.lib");read("Verif_Determ.lib");read("Simul.lib");read("Synthesis_Partial_order.lib");read("Orbite.lib");
% -- dependencies --- %

% ---------- process controller ---------- %

declare(controller_v_17, controller_v_18, controller_v_19,
        controller_c_motor4, controller_c_motor3, controller_c_motor2,
        controller_c_motor1, controller_c_move, controller_ck_1,
        controller_pnr_5, controller_v_58, controller_v_57, controller_pnr_4,
        controller_ck_7_1, controller_pnr_3, controller_ck_9_1,
        controller_pnr_2, controller_ck_11_1, controller_pnr_1,
        controller_ck_13_1, controller_pnr, controller_error_state);
conditions : [controller_v_17, controller_v_18, controller_v_19,
              controller_c_motor4, controller_c_motor3, controller_c_motor2,
              controller_c_motor1, controller_c_move];
states : [controller_ck_1, controller_pnr_5, controller_v_58,
          controller_v_57, controller_pnr_4, controller_ck_7_1,
          controller_pnr_3, controller_ck_9_1, controller_pnr_2,
          controller_ck_11_1, controller_pnr_1, controller_ck_13_1,
          controller_pnr, controller_error_state];
controllables : [controller_c_motor4, controller_c_motor3,
                 controller_c_motor2, controller_c_motor1, controller_c_move];
evolutions : [];
initialisations : [];
controller_ck_5_2 : controller_v_58;
controller_ck_5_1 : controller_v_57;
controller_c : controller_c_move;
controller_c_motor : controller_c_motor1;
controller_c_motor_1 : controller_c_motor2;
controller_c_motor_2 : controller_c_motor3;
controller_c_motor_3 : controller_c_motor4;
controller_s_5_St_8_NO_OBSTACLE_1 : ((-1 when controller_v_17) default 1);
controller_r_5_St_8_NO_OBSTACLE : ((1 when controller_v_17)
  default controller_pnr_5);
controller_s_5_St_8_OBSTACLE_1 : ((1 when controller_v_18) default -1);
controller_s_5_1 : ((controller_s_5_St_8_NO_OBSTACLE_1 when controller_ck_1)
  default controller_s_5_St_8_OBSTACLE_1);
controller_r_5_St_8_OBSTACLE : ((1 when controller_v_18)
  default controller_pnr_5);
controller_r_5 : ((controller_r_5_St_8_NO_OBSTACLE when controller_ck_1)
  default controller_r_5_St_8_OBSTACLE);
controller_ck_4_1 : controller_s_5_1;
controller_ns_5_St_8_NO_OBSTACLE_1 : 1;
controller_nr_5_St_8_NO_OBSTACLE : -1;
controller_out_St_8_NO_OBSTACLE : -1;
controller_ns_5_St_8_OBSTACLE_1 : -1;
controller_ns_5_1 : ((controller_ns_5_St_8_NO_OBSTACLE_1
  when controller_ck_4_1) default controller_ns_5_St_8_OBSTACLE_1);
controller_nr_5_St_8_OBSTACLE : -1;
controller_nr_5 : ((controller_nr_5_St_8_NO_OBSTACLE when controller_ck_4_1)
  default controller_nr_5_St_8_OBSTACLE);
controller_out_St_8_OBSTACLE : 1;
controller_out : ((controller_out_St_8_NO_OBSTACLE when controller_ck_4_1)
  default controller_out_St_8_OBSTACLE);
controller_obs : controller_out;
controller_ck_5_2_0 : controller_ck_5_2;
controller_ck_5_2_1 : controller_ck_5_2;
controller_v_20 : (controller_c and controller_v_19);
controller_s_4_St_7_TURNING_STATE_2 : ((-1 when controller_v_20) default -1);
controller_v_62 : ((1 when controller_ck_5_2_0)
  default controller_s_4_St_7_TURNING_STATE_2);
controller_s_4_St_7_TURNING_STATE_1 : ((1 when controller_v_20) default -1);
controller_v_61 : ((1 when controller_ck_5_2_0)
  default controller_s_4_St_7_TURNING_STATE_1);
controller_r_4_St_7_TURNING_STATE : ((1 when controller_v_20)
  default controller_pnr_4);
controller_v_64 : ((1 when controller_ck_5_2_0)
  default controller_r_4_St_7_TURNING_STATE);
controller_s_4_St_7_TURNING_STATE_2_0 : controller_s_4_St_7_TURNING_STATE_2;
controller_s_4_St_7_TURNING_STATE_2_1 : controller_s_4_St_7_TURNING_STATE_2;
controller_s_4_St_7_STURNING_STATE_2 : -1;
controller_s_4_St_7_STURNING_STATE_1 : 1;
controller_r_4_St_7_STURNING_STATE : controller_pnr_4;
controller_v_21 : (not controller_c);
controller_s_4_St_7_MOVING_STATE_2 : ((-1 when controller_v_21) default 1);
controller_v_60 : ((controller_s_4_St_7_MOVING_STATE_2
  when controller_ck_5_2_1) default controller_s_4_St_7_STURNING_STATE_2);
controller_s_4_St_7_MOVING_STATE_1 : ((1 when controller_v_21) default 1);
controller_v_59 : ((controller_s_4_St_7_MOVING_STATE_1
  when controller_ck_5_2_1) default controller_s_4_St_7_STURNING_STATE_1);
controller_r_4_St_7_MOVING_STATE : ((1 when controller_v_21)
  default controller_pnr_4);
controller_v_63 : ((controller_r_4_St_7_MOVING_STATE
  when controller_ck_5_2_1) default controller_r_4_St_7_STURNING_STATE);
controller_s_4_St_7_STURNING_STATE_2_0 : controller_s_4_St_7_STURNING_STATE_2;
controller_s_4_St_7_STURNING_STATE_2_1 : controller_s_4_St_7_STURNING_STATE_2;
controller_s_4_St_7_MOVING_STATE_2_0 : controller_s_4_St_7_MOVING_STATE_2;
controller_s_4_St_7_MOVING_STATE_2_1 : controller_s_4_St_7_MOVING_STATE_2;
controller_r_4 : ((controller_v_63 when controller_ck_5_1)
  default controller_v_64);
controller_s_4_2 : ((controller_v_60 when controller_ck_5_1)
  default controller_v_62);
controller_s_4_1 : ((controller_v_59 when controller_ck_5_1)
  default controller_v_61);
controller_s_4_2_0 : controller_s_4_2;
controller_s_4_2_1 : controller_s_4_2;
controller_ck_6_2 : controller_s_4_2;
controller_ck_6_1 : controller_s_4_1;
controller_ck_6_2_0 : controller_ck_6_2;
controller_ck_6_2_1 : controller_ck_6_2;
controller_ns_4_St_7_TURNING_STATE_2 : -1;
controller_v_54 : ((1 when controller_ck_6_2_0)
  default controller_ns_4_St_7_TURNING_STATE_2);
controller_ns_4_St_7_TURNING_STATE_1 : -1;
controller_v_53 : ((1 when controller_ck_6_2_0)
  default controller_ns_4_St_7_TURNING_STATE_1);
controller_nr_4_St_7_TURNING_STATE : -1;
controller_v_56 : ((1 when controller_ck_6_2_0)
  default controller_nr_4_St_7_TURNING_STATE);
controller_turning_1_St_7_TURNING_STATE : 1;
controller_v_48 : ((1 when controller_ck_6_2_0)
  default controller_turning_1_St_7_TURNING_STATE);
controller_ns_4_St_7_TURNING_STATE_2_0 : controller_ns_4_St_7_TURNING_STATE_2;
controller_ns_4_St_7_TURNING_STATE_2_1 : controller_ns_4_St_7_TURNING_STATE_2;
controller_v_22 : (not controller_c);
controller_v_23_2 : ((1 when controller_c) default -1);
controller_v_23_1 : ((1 when controller_c) default 1);
controller_v_24 : ((1 when controller_c) default -1);
controller_ns_4_St_7_STURNING_STATE_2 : ((-1 when controller_v_22)
  default controller_v_23_2);
controller_ns_4_St_7_STURNING_STATE_1 : ((-1 when controller_v_22)
  default controller_v_23_1);
controller_nr_4_St_7_STURNING_STATE : ((1 when controller_v_22)
  default controller_v_24);
controller_turning_1_St_7_STURNING_STATE : 1;
controller_mbc_St_7_STURNING_STATE : a_const(0);
controller_ns_4_St_7_MOVING_STATE_2 : 1;
controller_v_52 : ((controller_ns_4_St_7_MOVING_STATE_2
  when controller_ck_6_2_1) default controller_ns_4_St_7_STURNING_STATE_2);
controller_ns_4_St_7_MOVING_STATE_1 : 1;
controller_v_51 : ((controller_ns_4_St_7_MOVING_STATE_1
  when controller_ck_6_2_1) default controller_ns_4_St_7_STURNING_STATE_1);
controller_nr_4_St_7_MOVING_STATE : -1;
controller_v_55 : ((controller_nr_4_St_7_MOVING_STATE
  when controller_ck_6_2_1) default controller_nr_4_St_7_STURNING_STATE);
controller_turning_1_St_7_MOVING_STATE : -1;
controller_v_47 : ((controller_turning_1_St_7_MOVING_STATE
  when controller_ck_6_2_1)
  default controller_turning_1_St_7_STURNING_STATE);
controller_mbc_St_7_MOVING_STATE : a_const(0);
controller_v_49 : a_part(controller_ck_6_2_1, a_const(0),
                         controller_mbc_St_7_MOVING_STATE,
                         controller_mbc_St_7_STURNING_STATE);
controller_ns_4_St_7_STURNING_STATE_2_0 : controller_ns_4_St_7_STURNING_STATE_2;
controller_ns_4_St_7_STURNING_STATE_2_1 : controller_ns_4_St_7_STURNING_STATE_2;
controller_ns_4_St_7_MOVING_STATE_2_0 : controller_ns_4_St_7_MOVING_STATE_2;
controller_ns_4_St_7_MOVING_STATE_2_1 : controller_ns_4_St_7_MOVING_STATE_2;
controller_nr_4 : ((controller_v_55 when controller_ck_6_1)
  default controller_v_56);
controller_ns_4_2 : ((controller_v_52 when controller_ck_6_1)
  default controller_v_54);
controller_ns_4_1 : ((controller_v_51 when controller_ck_6_1)
  default controller_v_53);
controller_turning_1 : ((controller_v_47 when controller_ck_6_1)
  default controller_v_48);
controller_ns_4_2_0 : controller_ns_4_2;
controller_ns_4_2_1 : controller_ns_4_2;
controller_turning : controller_turning_1;
controller_v_23_2_0 : controller_v_23_2;
controller_v_23_2_1 : controller_v_23_2;
controller_s_3_St_6_BACKWARD_STATE_1 : ((-1 when controller_c_motor)
  default 1);
controller_r_3_St_6_BACKWARD_STATE : ((1 when controller_c_motor)
  default controller_pnr_3);
controller_v_25 : (not controller_c_motor);
controller_s_3_St_6_FORWARD_STATE_1 : ((1 when controller_v_25) default -1);
controller_s_3_1 : ((controller_s_3_St_6_BACKWARD_STATE_1
  when controller_ck_7_1) default controller_s_3_St_6_FORWARD_STATE_1);
controller_r_3_St_6_FORWARD_STATE : ((1 when controller_v_25)
  default controller_pnr_3);
controller_r_3 : ((controller_r_3_St_6_BACKWARD_STATE when controller_ck_7_1)
  default controller_r_3_St_6_FORWARD_STATE);
controller_ck_8_1 : controller_s_3_1;
controller_ns_3_St_6_BACKWARD_STATE_1 : 1;
controller_nr_3_St_6_BACKWARD_STATE : -1;
controller_velocity_St_6_BACKWARD_STATE : a_const(100);
controller_mode_St_6_BACKWARD_STATE : -1;
controller_ns_3_St_6_FORWARD_STATE_1 : -1;
controller_ns_3_1 : ((controller_ns_3_St_6_BACKWARD_STATE_1
  when controller_ck_8_1) default controller_ns_3_St_6_FORWARD_STATE_1);
controller_nr_3_St_6_FORWARD_STATE : -1;
controller_nr_3 : ((controller_nr_3_St_6_BACKWARD_STATE
  when controller_ck_8_1) default controller_nr_3_St_6_FORWARD_STATE);
controller_velocity_St_6_FORWARD_STATE : a_const(255);
controller_velocity : a_part(controller_ck_8_1, a_const(0),
                             controller_velocity_St_6_BACKWARD_STATE,
                             controller_velocity_St_6_FORWARD_STATE);
controller_mode_St_6_FORWARD_STATE : 1;
controller_mode : ((controller_mode_St_6_BACKWARD_STATE
  when controller_ck_8_1) default controller_mode_St_6_FORWARD_STATE);
controller_motor1 : controller_mode;
controller_vel1 : controller_velocity;
controller_s_2_St_5_BACKWARD_STATE_1 : ((-1 when controller_c_motor_1)
  default 1);
controller_r_2_St_5_BACKWARD_STATE : ((1 when controller_c_motor_1)
  default controller_pnr_2);
controller_v_26 : (not controller_c_motor_1);
controller_s_2_St_5_FORWARD_STATE_1 : ((1 when controller_v_26) default -1);
controller_s_2_1 : ((controller_s_2_St_5_BACKWARD_STATE_1
  when controller_ck_9_1) default controller_s_2_St_5_FORWARD_STATE_1);
controller_r_2_St_5_FORWARD_STATE : ((1 when controller_v_26)
  default controller_pnr_2);
controller_r_2 : ((controller_r_2_St_5_BACKWARD_STATE when controller_ck_9_1)
  default controller_r_2_St_5_FORWARD_STATE);
controller_ck_10_1 : controller_s_2_1;
controller_ns_2_St_5_BACKWARD_STATE_1 : 1;
controller_nr_2_St_5_BACKWARD_STATE : -1;
controller_velocity_1_St_5_BACKWARD_STATE : a_const(100);
controller_mode_1_St_5_BACKWARD_STATE : -1;
controller_ns_2_St_5_FORWARD_STATE_1 : -1;
controller_ns_2_1 : ((controller_ns_2_St_5_BACKWARD_STATE_1
  when controller_ck_10_1) default controller_ns_2_St_5_FORWARD_STATE_1);
controller_nr_2_St_5_FORWARD_STATE : -1;
controller_nr_2 : ((controller_nr_2_St_5_BACKWARD_STATE
  when controller_ck_10_1) default controller_nr_2_St_5_FORWARD_STATE);
controller_velocity_1_St_5_FORWARD_STATE : a_const(255);
controller_velocity_1 : a_part(controller_ck_10_1, a_const(0),
                               controller_velocity_1_St_5_BACKWARD_STATE,
                               controller_velocity_1_St_5_FORWARD_STATE);
controller_mode_1_St_5_FORWARD_STATE : 1;
controller_mode_1 : ((controller_mode_1_St_5_BACKWARD_STATE
  when controller_ck_10_1) default controller_mode_1_St_5_FORWARD_STATE);
controller_motor2 : controller_mode_1;
controller_vel2 : controller_velocity_1;
controller_s_1_St_4_BACKWARD_STATE_1 : ((-1 when controller_c_motor_2)
  default 1);
controller_r_1_St_4_BACKWARD_STATE : ((1 when controller_c_motor_2)
  default controller_pnr_1);
controller_v_27 : (not controller_c_motor_2);
controller_s_1_St_4_FORWARD_STATE_1 : ((1 when controller_v_27) default -1);
controller_s_1_1 : ((controller_s_1_St_4_BACKWARD_STATE_1
  when controller_ck_11_1) default controller_s_1_St_4_FORWARD_STATE_1);
controller_r_1_St_4_FORWARD_STATE : ((1 when controller_v_27)
  default controller_pnr_1);
controller_r_1 : ((controller_r_1_St_4_BACKWARD_STATE
  when controller_ck_11_1) default controller_r_1_St_4_FORWARD_STATE);
controller_ck_12_1 : controller_s_1_1;
controller_ns_1_St_4_BACKWARD_STATE_1 : 1;
controller_nr_1_St_4_BACKWARD_STATE : -1;
controller_velocity_2_St_4_BACKWARD_STATE : a_const(100);
controller_mode_2_St_4_BACKWARD_STATE : -1;
controller_ns_1_St_4_FORWARD_STATE_1 : -1;
controller_ns_1_1 : ((controller_ns_1_St_4_BACKWARD_STATE_1
  when controller_ck_12_1) default controller_ns_1_St_4_FORWARD_STATE_1);
controller_nr_1_St_4_FORWARD_STATE : -1;
controller_nr_1 : ((controller_nr_1_St_4_BACKWARD_STATE
  when controller_ck_12_1) default controller_nr_1_St_4_FORWARD_STATE);
controller_velocity_2_St_4_FORWARD_STATE : a_const(255);
controller_velocity_2 : a_part(controller_ck_12_1, a_const(0),
                               controller_velocity_2_St_4_BACKWARD_STATE,
                               controller_velocity_2_St_4_FORWARD_STATE);
controller_mode_2_St_4_FORWARD_STATE : 1;
controller_mode_2 : ((controller_mode_2_St_4_BACKWARD_STATE
  when controller_ck_12_1) default controller_mode_2_St_4_FORWARD_STATE);
controller_motor3 : controller_mode_2;
controller_vel3 : controller_velocity_2;
controller_s_St_3_BACKWARD_STATE_1 : ((-1 when controller_c_motor_3)
  default 1);
controller_r_St_3_BACKWARD_STATE : ((1 when controller_c_motor_3)
  default controller_pnr);
controller_v_28 : (not controller_c_motor_3);
controller_s_St_3_FORWARD_STATE_1 : ((1 when controller_v_28) default -1);
controller_s_1_2 : ((controller_s_St_3_BACKWARD_STATE_1
  when controller_ck_13_1) default controller_s_St_3_FORWARD_STATE_1);
controller_r_St_3_FORWARD_STATE : ((1 when controller_v_28)
  default controller_pnr);
controller_r : ((controller_r_St_3_BACKWARD_STATE when controller_ck_13_1)
  default controller_r_St_3_FORWARD_STATE);
controller_ck_14_1 : controller_s_1_2;
controller_ns_St_3_BACKWARD_STATE_1 : 1;
controller_nr_St_3_BACKWARD_STATE : -1;
controller_velocity_3_St_3_BACKWARD_STATE : a_const(100);
controller_mode_3_St_3_BACKWARD_STATE : -1;
controller_ns_St_3_FORWARD_STATE_1 : -1;
controller_ns_1_2 : ((controller_ns_St_3_BACKWARD_STATE_1
  when controller_ck_14_1) default controller_ns_St_3_FORWARD_STATE_1);
controller_nr_St_3_FORWARD_STATE : -1;
controller_nr : ((controller_nr_St_3_BACKWARD_STATE when controller_ck_14_1)
  default controller_nr_St_3_FORWARD_STATE);
controller_velocity_3_St_3_FORWARD_STATE : a_const(255);
controller_velocity_3 : a_part(controller_ck_14_1, a_const(0),
                               controller_velocity_3_St_3_BACKWARD_STATE,
                               controller_velocity_3_St_3_FORWARD_STATE);
controller_mode_3_St_3_FORWARD_STATE : 1;
controller_mode_3 : ((controller_mode_3_St_3_BACKWARD_STATE
  when controller_ck_14_1) default controller_mode_3_St_3_FORWARD_STATE);
controller_motor4 : controller_mode_3;
controller_vel4 : controller_velocity_3;
initialisations : concat(initialisations, [(controller_ck_1 = -1)]);
evolutions : concat(evolutions, [(controller_ns_5_1 default controller_ck_1)]);
initialisations : concat(initialisations, [(controller_pnr_5 = -1)]);
evolutions : concat(evolutions, [(controller_nr_5 default controller_pnr_5)]);
initialisations : concat(initialisations, [(controller_v_58 = 1)]);
evolutions : concat(evolutions, [(controller_ns_4_2 default controller_v_58)]);
initialisations : concat(initialisations, [(controller_v_57 = 1)]);
evolutions : concat(evolutions, [(controller_ns_4_1 default controller_v_57)]);
initialisations : concat(initialisations, [(controller_pnr_4 = -1)]);
evolutions : concat(evolutions, [(controller_nr_4 default controller_pnr_4)]);
initialisations : concat(initialisations, [(controller_ck_7_1 = -1)]);
evolutions : concat(evolutions,
                    [(controller_ns_3_1 default controller_ck_7_1)]);
initialisations : concat(initialisations, [(controller_pnr_3 = -1)]);
evolutions : concat(evolutions, [(controller_nr_3 default controller_pnr_3)]);
initialisations : concat(initialisations, [(controller_ck_9_1 = -1)]);
evolutions : concat(evolutions,
                    [(controller_ns_2_1 default controller_ck_9_1)]);
initialisations : concat(initialisations, [(controller_pnr_2 = -1)]);
evolutions : concat(evolutions, [(controller_nr_2 default controller_pnr_2)]);
initialisations : concat(initialisations, [(controller_ck_11_1 = -1)]);
evolutions : concat(evolutions,
                    [(controller_ns_1_1 default controller_ck_11_1)]);
initialisations : concat(initialisations, [(controller_pnr_1 = -1)]);
evolutions : concat(evolutions, [(controller_nr_1 default controller_pnr_1)]);
initialisations : concat(initialisations, [(controller_ck_13_1 = -1)]);
evolutions : concat(evolutions,
                    [(controller_ns_1_2 default controller_ck_13_1)]);
initialisations : concat(initialisations, [(controller_pnr = -1)]);
evolutions : concat(evolutions, [(controller_nr default controller_pnr)]);
controller_v_14 : (not controller_motor4);
controller_v_12 : controller_motor3;
controller_v_10 : (not controller_motor2);
controller_v_9 : controller_motor1;
controller_v_11 : (controller_v_9 and controller_v_10);
controller_v_13 : (controller_v_11 and controller_v_12);
controller_v_15 : (controller_v_13 and controller_v_14);
controller_v_16 : (controller_turning and controller_v_15);
controller_v_7 : (not controller_turning);
controller_v : (not controller_obs);
controller_v_8 : (controller_v and controller_v_7);
controller_rule : (controller_v_8 or controller_v_16);
controller_assume : 1;
controller_guarantee : controller_rule;
initialisations : concat(initialisations, [(controller_error_state = 1)]);
evolutions : concat(evolutions, [controller_guarantee]);
constraints : [((controller_v_17^2) = 1), ((controller_v_18^2) = 1),
               ((controller_v_19^2) = 1), ((controller_c_motor4^2) = 1),
               ((controller_c_motor3^2) = 1), ((controller_c_motor2^2) = 1),
               ((controller_c_motor1^2) = 1), ((controller_c_move^2) = 1),
               (controller_assume = 1)];

% --- outputs : [controller_obs, controller_turning, controller_motor1,
                 controller_motor2, controller_motor3, controller_motor4,
                 controller_cont, controller_vel1, controller_vel2,
                 controller_vel3, controller_vel4] --- %
controller : processus(conditions, states, evolutions, initialisations,
                       [gen(constraints)], controllables);
controller_init : initial(controller);
controller : S_Security(controller,B_True(controller,controller_error_state));
dcs_result : equal(controller_init,initial(controller));
if dcs_result then
    print("controller: synthesis succeeded.")
else
    print("controller: synthesis failed.");

if dcs_result then
    print("Triangulation and controller generation...")
else
    quit(1);
declare(p_controller_c_motor4, p_controller_c_motor3, p_controller_c_motor2,
        p_controller_c_motor1, p_controller_c_move);
phantom_vars : [p_controller_c_motor4, p_controller_c_motor3,
                p_controller_c_motor2, p_controller_c_motor1,
                p_controller_c_move];
controller_triang : Triang(constraint(controller),controllables,phantom_vars);
controller_inputs : [controller_v_17, controller_v_18, controller_v_19,
                     controller_ck_1, controller_pnr_5, controller_v_58,
                     controller_v_57, controller_pnr_4, controller_ck_7_1,
                     controller_pnr_3, controller_ck_9_1, controller_pnr_2,
                     controller_ck_11_1, controller_pnr_1,
                     controller_ck_13_1, controller_pnr,
                     p_controller_c_motor4, p_controller_c_motor3,
                     p_controller_c_motor2, p_controller_c_motor1,
                     p_controller_c_move];
heptagon_controller("controller_controller.ept","controller",controller_inputs,controllables,controller_triang);

