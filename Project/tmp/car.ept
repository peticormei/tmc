(*
    until => executa o estado em que estÃ¡ e transiciona para outro estado
    unless => transiciona para outro estado e executa o novo estado
*)

node movement(event_dir: int; has_obs_l, has_obs_r: bool) returns (state_dir: int)
let
	automaton
		state AHEAD do
			state_dir = 1;
			unless ((event_dir = 2 & (not has_obs_l)) or has_obs_r) then TURN_LEFT
				| ((event_dir = 3 & (not has_obs_r)) or has_obs_l) then TURN_RIGHT
		state TURN_LEFT do
			state_dir = 2;
			unless (event_dir = 1 & ((not has_obs_l) & (not has_obs_r))) then AHEAD
				| ((event_dir = 3 & (not has_obs_r)) or has_obs_l) then TURN_RIGHT
		state TURN_RIGHT do
			state_dir = 3;
			unless (event_dir = 1 & ((not has_obs_l) & (not has_obs_r))) then AHEAD
				| ((event_dir = 2 & (not has_obs_l)) or has_obs_r) then TURN_LEFT
	end
tel

node controller(event_dir: int; has_obs_l, has_obs_r: bool) returns (state_dir: int)
let
	state_dir = inlined movement(event_dir, has_obs_l, has_obs_r);
tel