type st_5 = St_5_OBSTACLE|St_5_NO_OBSTACLE
type st_4 = St_4_FORWARD|St_4_BACKWARD
type st_3 = St_3_OBSTACLE|St_3_NO_OBSTACLE
type st_2 = St_2_FORWARD|St_2_BACKWARD
type st_1 = St_1_FORWARD|St_1_BACKWARD
type st = St_OBSTACLE|St_NO_OBSTACLE
node obstacle(dist : int) returns (obs : bool)
var nr_St_NO_OBSTACLE : bool; ns_St_NO_OBSTACLE_1 : bool;
    obs_St_NO_OBSTACLE : bool; nr_St_OBSTACLE : bool;
    ns_St_OBSTACLE_1 : bool; obs_St_OBSTACLE : bool; ck_1_1 : bool;
    v_1 : bool; v : bool; r_St_NO_OBSTACLE : bool; s_St_NO_OBSTACLE_1 : bool;
    r_St_OBSTACLE : bool; s_St_OBSTACLE_1 : bool; ck_1_2 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  obs_St_OBSTACLE = true;
  nr_St_OBSTACLE = false;
  ns_St_OBSTACLE_1 = false;
  obs_St_NO_OBSTACLE = false;
  nr_St_NO_OBSTACLE = false;
  ns_St_NO_OBSTACLE_1 = true;
  obs = merge ck_1_1 (true -> obs_St_NO_OBSTACLE)(false -> obs_St_OBSTACLE);
  ns_1 =
    merge ck_1_1 (true -> ns_St_NO_OBSTACLE_1)(false -> ns_St_OBSTACLE_1);
  nr = merge ck_1_1 (true -> nr_St_NO_OBSTACLE)(false -> nr_St_OBSTACLE);
  ck_1_2 = false fby ns_1;
  r_St_OBSTACLE = if v_1 then true else (pnr when false(ck_1_2));
  s_St_OBSTACLE_1 = if v_1 then true else false;
  v_1 = ((dist when false(ck_1_2)) > 45);
  r_St_NO_OBSTACLE = if v then true else (pnr when true(ck_1_2));
  s_St_NO_OBSTACLE_1 = if v then false else true;
  v = ((dist when true(ck_1_2)) <= 45);
  s_1 = merge ck_1_2 (true -> s_St_NO_OBSTACLE_1)(false -> s_St_OBSTACLE_1);
  r = merge ck_1_2 (true -> r_St_NO_OBSTACLE)(false -> r_St_OBSTACLE)
tel

node motor(event_dir : int; cntrl_turn : bool)
returns (mode : int; velocity : int)
var nr_St_1_BACKWARD : bool; ns_St_1_BACKWARD_1 : bool;
    velocity_St_1_BACKWARD : int; mode_St_1_BACKWARD : int;
    nr_St_1_FORWARD : bool; ns_St_1_FORWARD_1 : bool;
    velocity_St_1_FORWARD : int; mode_St_1_FORWARD : int; ck_2_1 : bool;
    v_5 : bool; v_4 : bool; v_3 : bool; v_2 : bool; v : bool;
    r_St_1_BACKWARD : bool; s_St_1_BACKWARD_1 : bool; r_St_1_FORWARD : bool;
    s_St_1_FORWARD_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  mode_St_1_FORWARD = 1;
  velocity_St_1_FORWARD = 255;
  nr_St_1_FORWARD = false;
  ns_St_1_FORWARD_1 = false;
  mode_St_1_BACKWARD = 2;
  velocity_St_1_BACKWARD = 255;
  nr_St_1_BACKWARD = false;
  ns_St_1_BACKWARD_1 = true;
  mode =
    merge ck_2_1 (true -> mode_St_1_BACKWARD)(false -> mode_St_1_FORWARD);
  velocity =
    merge ck_2_1
      (true -> velocity_St_1_BACKWARD)(false -> velocity_St_1_FORWARD);
  ns_1 =
    merge ck_2_1 (true -> ns_St_1_BACKWARD_1)(false -> ns_St_1_FORWARD_1);
  nr = merge ck_2_1 (true -> nr_St_1_BACKWARD)(false -> nr_St_1_FORWARD);
  ck_1 = false fby ns_1;
  r_St_1_FORWARD = if v_5 then true else (pnr when false(ck_1));
  s_St_1_FORWARD_1 = if v_5 then true else false;
  v_5 = (v_3 or v_4);
  v_4 = not((cntrl_turn when false(ck_1)));
  v_3 = ((event_dir when false(ck_1)) = 2);
  r_St_1_BACKWARD = if v_2 then true else (pnr when true(ck_1));
  s_St_1_BACKWARD_1 = if v_2 then false else true;
  v_2 = (v & (cntrl_turn when true(ck_1)));
  v = ((event_dir when true(ck_1)) = 1);
  s_1 = merge ck_1 (true -> s_St_1_BACKWARD_1)(false -> s_St_1_FORWARD_1);
  r = merge ck_1 (true -> r_St_1_BACKWARD)(false -> r_St_1_FORWARD)
tel

node controller(distance_left : int; distance_right : int;
                 event_dir_left : int; event_dir_right : int)
returns (obs_left : bool; obs_right : bool; motor_mode_left : int;
          motor_mode_right : int; motor_speed_left : int;
          motor_speed_right : int)
contract
  var rule3 : bool; rule2 : bool; rule1 : bool; v : bool; v_6 : bool;
      v_7 : bool; v_8 : bool; v_9 : bool; v_10 : bool; v_11 : bool;
      v_12 : bool; v_13 : bool; v_14 : bool; v_15 : bool; v_16 : bool;
      v_17 : bool; v_18 : bool; v_19 : bool; v_20 : bool; v_21 : bool;
  let
    v = (obs_right & obs_left);
    v_6 = not(v);
    v_7 = (motor_mode_left = 2);
    v_8 = (motor_mode_right = 2);
    v_9 = (v_7 & v_8);
    rule3 = (v_6 or v_9);
    v_10 = (motor_mode_left = 2);
    v_11 = not(v_10);
    v_12 = (obs_right & v_11);
    v_13 = not(v_12);
    v_14 = (motor_mode_left = 2);
    rule2 = (v_13 or v_14);
    v_15 = (motor_mode_right = 2);
    v_16 = not(v_15);
    v_17 = (obs_left & v_16);
    v_18 = not(v_17);
    v_19 = (motor_mode_right = 2);
    rule1 = (v_18 or v_19);
    v_20 = (rule1 & rule2);
    v_21 = (v_20 & rule3)
  tel
  assume true@ enforce v_21] with (cntrl_turn_r : bool; cntrl_turn_l : bool)
                 var nr_St_2_BACKWARD : bool; ns_St_2_BACKWARD_1 : bool;
                     velocity_1_St_2_BACKWARD : int;
                     mode_1_St_2_BACKWARD : int; nr_St_2_FORWARD : bool;
                     ns_St_2_FORWARD_1 : bool; velocity_1_St_2_FORWARD : int;
                     mode_1_St_2_FORWARD : int; ck_9_1 : bool; v_35 : bool;
                     v_34 : bool; v_33 : bool; v_32 : bool; v_31 : bool;
                     r_St_2_BACKWARD : bool; s_St_2_BACKWARD_1 : bool;
                     r_St_2_FORWARD : bool; s_St_2_FORWARD_1 : bool;
                     ck_8_1 : bool; nr_1_St_3_NO_OBSTACLE : bool;
                     ns_1_St_3_NO_OBSTACLE_1 : bool;
                     obs_1_St_3_NO_OBSTACLE : bool;
                     nr_1_St_3_OBSTACLE : bool; ns_1_St_3_OBSTACLE_1 : bool;
                     obs_1_St_3_OBSTACLE : bool; ck_7_1 : bool; v_30 : bool;
                     v_29 : bool; r_1_St_3_NO_OBSTACLE : bool;
                     s_1_St_3_NO_OBSTACLE_1 : bool; r_1_St_3_OBSTACLE : bool;
                     s_1_St_3_OBSTACLE_1 : bool; ck_6_1 : bool;
                     nr_2_St_4_BACKWARD : bool; ns_2_St_4_BACKWARD_1 : bool;
                     velocity_St_4_BACKWARD : int; mode_St_4_BACKWARD : int;
                     nr_2_St_4_FORWARD : bool; ns_2_St_4_FORWARD_1 : bool;
                     velocity_St_4_FORWARD : int; mode_St_4_FORWARD : int;
                     ck_5_1 : bool; v_28 : bool; v_27 : bool; v_26 : bool;
                     v_25 : bool; v_24 : bool; r_2_St_4_BACKWARD : bool;
                     s_2_St_4_BACKWARD_1 : bool; r_2_St_4_FORWARD : bool;
                     s_2_St_4_FORWARD_1 : bool; ck_4_1 : bool;
                     nr_3_St_5_NO_OBSTACLE : bool;
                     ns_3_St_5_NO_OBSTACLE_1 : bool;
                     obs_St_5_NO_OBSTACLE : bool; nr_3_St_5_OBSTACLE : bool;
                     ns_3_St_5_OBSTACLE_1 : bool; obs_St_5_OBSTACLE : bool;
                     ck_3_1 : bool; v_23 : bool; v_22 : bool;
                     r_3_St_5_NO_OBSTACLE : bool;
                     s_3_St_5_NO_OBSTACLE_1 : bool; r_3_St_5_OBSTACLE : bool;
                     s_3_St_5_OBSTACLE_1 : bool; ck_1 : bool; s_3_1 : bool;
                     ns_3_1 : bool; r_3 : bool; nr_3 : bool; pnr_3 : bool;
                     s_2_1 : bool; ns_2_1 : bool; r_2 : bool; nr_2 : bool;
                     pnr_2 : bool; s_1_1 : bool; ns_1_1 : bool; r_1 : bool;
                     nr_1 : bool; pnr_1 : bool; s_1_2 : bool; ns_1_2 : bool;
                     r : bool; nr : bool; pnr : bool; event_dir_1 : int;
                     cntrl_turn_1 : bool; mode_1 : int; velocity_1 : int;
                     dist_1 : int; obs_1 : bool; event_dir : int;
                     cntrl_turn : bool; mode : int; velocity : int;
                     dist : int; obs : bool;
  let
    event_dir_1 = event_dir_right;
    cntrl_turn_1 = cntrl_turn_l;
    pnr = false fby nr;
    ck_9_1 = s_1_2;
    mode_1_St_2_FORWARD = 1;
    velocity_1_St_2_FORWARD = 255;
    nr_St_2_FORWARD = false;
    ns_St_2_FORWARD_1 = false;
    mode_1_St_2_BACKWARD = 2;
    velocity_1_St_2_BACKWARD = 255;
    nr_St_2_BACKWARD = false;
    ns_St_2_BACKWARD_1 = true;
    mode_1 =
      merge ck_9_1
        (true -> mode_1_St_2_BACKWARD)(false -> mode_1_St_2_FORWARD);
    velocity_1 =
      merge ck_9_1
        (true -> velocity_1_St_2_BACKWARD)(false -> velocity_1_St_2_FORWARD);
    ns_1_2 =
      merge ck_9_1 (true -> ns_St_2_BACKWARD_1)(false -> ns_St_2_FORWARD_1);
    nr = merge ck_9_1 (true -> nr_St_2_BACKWARD)(false -> nr_St_2_FORWARD);
    ck_8_1 = false fby ns_1_2;
    r_St_2_FORWARD = if v_35 then true else (pnr when false(ck_8_1));
    s_St_2_FORWARD_1 = if v_35 then true else false;
    v_35 = (v_33 or v_34);
    v_34 = not((cntrl_turn_1 when false(ck_8_1)));
    v_33 = ((event_dir_1 when false(ck_8_1)) = 2);
    r_St_2_BACKWARD = if v_32 then true else (pnr when true(ck_8_1));
    s_St_2_BACKWARD_1 = if v_32 then false else true;
    v_32 = (v_31 & (cntrl_turn_1 when true(ck_8_1)));
    v_31 = ((event_dir_1 when true(ck_8_1)) = 1);
    s_1_2 =
      merge ck_8_1 (true -> s_St_2_BACKWARD_1)(false -> s_St_2_FORWARD_1);
    r = merge ck_8_1 (true -> r_St_2_BACKWARD)(false -> r_St_2_FORWARD);
    dist_1 = distance_right;
    pnr_1 = false fby nr_1;
    ck_7_1 = s_1_1;
    obs_1_St_3_OBSTACLE = true;
    nr_1_St_3_OBSTACLE = false;
    ns_1_St_3_OBSTACLE_1 = false;
    obs_1_St_3_NO_OBSTACLE = false;
    nr_1_St_3_NO_OBSTACLE = false;
    ns_1_St_3_NO_OBSTACLE_1 = true;
    obs_1 =
      merge ck_7_1
        (true -> obs_1_St_3_NO_OBSTACLE)(false -> obs_1_St_3_OBSTACLE);
    ns_1_1 =
      merge ck_7_1
        (true -> ns_1_St_3_NO_OBSTACLE_1)(false -> ns_1_St_3_OBSTACLE_1);
    nr_1 =
      merge ck_7_1
        (true -> nr_1_St_3_NO_OBSTACLE)(false -> nr_1_St_3_OBSTACLE);
    ck_6_1 = false fby ns_1_1;
    r_1_St_3_OBSTACLE = if v_30 then true else (pnr_1 when false(ck_6_1));
    s_1_St_3_OBSTACLE_1 = if v_30 then true else false;
    v_30 = ((dist_1 when false(ck_6_1)) > 45);
    r_1_St_3_NO_OBSTACLE = if v_29 then true else (pnr_1 when true(ck_6_1));
    s_1_St_3_NO_OBSTACLE_1 = if v_29 then false else true;
    v_29 = ((dist_1 when true(ck_6_1)) <= 45);
    s_1_1 =
      merge ck_6_1
        (true -> s_1_St_3_NO_OBSTACLE_1)(false -> s_1_St_3_OBSTACLE_1);
    r_1 =
      merge ck_6_1 (true -> r_1_St_3_NO_OBSTACLE)(false -> r_1_St_3_OBSTACLE);
    event_dir = event_dir_left;
    cntrl_turn = cntrl_turn_r;
    pnr_2 = false fby nr_2;
    ck_5_1 = s_2_1;
    mode_St_4_FORWARD = 1;
    velocity_St_4_FORWARD = 255;
    nr_2_St_4_FORWARD = false;
    ns_2_St_4_FORWARD_1 = false;
    mode_St_4_BACKWARD = 2;
    velocity_St_4_BACKWARD = 255;
    nr_2_St_4_BACKWARD = false;
    ns_2_St_4_BACKWARD_1 = true;
    mode =
      merge ck_5_1 (true -> mode_St_4_BACKWARD)(false -> mode_St_4_FORWARD);
    velocity =
      merge ck_5_1
        (true -> velocity_St_4_BACKWARD)(false -> velocity_St_4_FORWARD);
    ns_2_1 =
      merge ck_5_1
        (true -> ns_2_St_4_BACKWARD_1)(false -> ns_2_St_4_FORWARD_1);
    nr_2 =
      merge ck_5_1 (true -> nr_2_St_4_BACKWARD)(false -> nr_2_St_4_FORWARD);
    ck_4_1 = false fby ns_2_1;
    r_2_St_4_FORWARD = if v_28 then true else (pnr_2 when false(ck_4_1));
    s_2_St_4_FORWARD_1 = if v_28 then true else false;
    v_28 = (v_26 or v_27);
    v_27 = not((cntrl_turn when false(ck_4_1)));
    v_26 = ((event_dir when false(ck_4_1)) = 2);
    r_2_St_4_BACKWARD = if v_25 then true else (pnr_2 when true(ck_4_1));
    s_2_St_4_BACKWARD_1 = if v_25 then false else true;
    v_25 = (v_24 & (cntrl_turn when true(ck_4_1)));
    v_24 = ((event_dir when true(ck_4_1)) = 1);
    s_2_1 =
      merge ck_4_1 (true -> s_2_St_4_BACKWARD_1)(false -> s_2_St_4_FORWARD_1);
    r_2 = merge ck_4_1 (true -> r_2_St_4_BACKWARD)(false -> r_2_St_4_FORWARD);
    dist = distance_left;
    pnr_3 = false fby nr_3;
    ck_3_1 = s_3_1;
    obs_St_5_OBSTACLE = true;
    nr_3_St_5_OBSTACLE = false;
    ns_3_St_5_OBSTACLE_1 = false;
    obs_St_5_NO_OBSTACLE = false;
    nr_3_St_5_NO_OBSTACLE = false;
    ns_3_St_5_NO_OBSTACLE_1 = true;
    obs =
      merge ck_3_1 (true -> obs_St_5_NO_OBSTACLE)(false -> obs_St_5_OBSTACLE);
    ns_3_1 =
      merge ck_3_1
        (true -> ns_3_St_5_NO_OBSTACLE_1)(false -> ns_3_St_5_OBSTACLE_1);
    nr_3 =
      merge ck_3_1
        (true -> nr_3_St_5_NO_OBSTACLE)(false -> nr_3_St_5_OBSTACLE);
    ck_1 = false fby ns_3_1;
    r_3_St_5_OBSTACLE = if v_23 then true else (pnr_3 when false(ck_1));
    s_3_St_5_OBSTACLE_1 = if v_23 then true else false;
    v_23 = ((dist when false(ck_1)) > 45);
    r_3_St_5_NO_OBSTACLE = if v_22 then true else (pnr_3 when true(ck_1));
    s_3_St_5_NO_OBSTACLE_1 = if v_22 then false else true;
    v_22 = ((dist when true(ck_1)) <= 45);
    s_3_1 =
      merge ck_1
        (true -> s_3_St_5_NO_OBSTACLE_1)(false -> s_3_St_5_OBSTACLE_1);
    r_3 =
      merge ck_1 (true -> r_3_St_5_NO_OBSTACLE)(false -> r_3_St_5_OBSTACLE);
    obs_left = obs;
    motor_speed_left = velocity;
    motor_mode_left = mode;
    obs_right = obs_1;
    motor_speed_right = velocity_1;
    motor_mode_right = mode_1
  tel

