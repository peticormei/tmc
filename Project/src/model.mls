type st_5 = St_5_OBSTACLE|St_5_NO_OBSTACLE
type st_4 = St_4_OBSTACLE|St_4_NO_OBSTACLE
type st_3 = St_3_TURN_RIGHT|St_3_TURN_LEFT|St_3_REVERSE|St_3_AHEAD
type st_2 = St_2_NOT_EQUALS|St_2_EQUALS
type st_1 = St_1_TURN_RIGHT|St_1_TURN_LEFT|St_1_REVERSE|St_1_AHEAD
type st = St_OBSTACLE|St_NO_OBSTACLE
node obstacle(dist : int) returns (obs : bool)
var nr_St_NO_OBSTACLE : bool; ns_St_NO_OBSTACLE_1 : bool;
    obs_St_NO_OBSTACLE : bool; nr_St_OBSTACLE : bool;
    ns_St_OBSTACLE_1 : bool; obs_St_OBSTACLE : bool; ck_1_1 : bool;
    v_1 : bool; v : bool; r_St_NO_OBSTACLE : bool; s_St_NO_OBSTACLE_1 : bool;
    r_St_OBSTACLE : bool; s_St_OBSTACLE_1 : bool; ck_1_2 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  obs_St_OBSTACLE = true;
  nr_St_OBSTACLE = false;
  ns_St_OBSTACLE_1 = false;
  obs_St_NO_OBSTACLE = false;
  nr_St_NO_OBSTACLE = false;
  ns_St_NO_OBSTACLE_1 = true;
  obs = merge ck_1_1 (true -> obs_St_NO_OBSTACLE)(false -> obs_St_OBSTACLE);
  ns_1 =
    merge ck_1_1 (true -> ns_St_NO_OBSTACLE_1)(false -> ns_St_OBSTACLE_1);
  nr = merge ck_1_1 (true -> nr_St_NO_OBSTACLE)(false -> nr_St_OBSTACLE);
  ck_1_2 = false fby ns_1;
  r_St_OBSTACLE = if v_1 then true else (pnr when false(ck_1_2));
  s_St_OBSTACLE_1 = if v_1 then true else false;
  v_1 = ((dist when false(ck_1_2)) > 45);
  r_St_NO_OBSTACLE = if v then true else (pnr when true(ck_1_2));
  s_St_NO_OBSTACLE_1 = if v then false else true;
  v = ((dist when true(ck_1_2)) <= 45);
  s_1 = merge ck_1_2 (true -> s_St_NO_OBSTACLE_1)(false -> s_St_OBSTACLE_1);
  r = merge ck_1_2 (true -> r_St_NO_OBSTACLE)(false -> r_St_OBSTACLE)
tel

node movement(cntrl_dir_left : bool; cntrl_dir_right : bool;
               cntrl_dir_reverse : bool; cntrl_dir_layer : bool;
               direction_layer_2 : int)
returns (direction : int)
var v_90 : bool; v_89 : bool; v_88 : bool; v_87 : bool; v_86 : bool;
    v_85 : bool; v_84 : int; v_83 : int; ns_St_1_REVERSE_2_0 : bool;
    ns_St_1_REVERSE_2_1 : bool; ns_St_1_TURN_RIGHT_2_0 : bool;
    ns_St_1_TURN_RIGHT_2_1 : bool; ns_St_1_TURN_LEFT_2_0 : bool;
    ns_St_1_TURN_LEFT_2_1 : bool; ns_St_1_AHEAD_2_0 : bool;
    ns_St_1_AHEAD_2_1 : bool; ck_2_2_0 : bool; ck_2_2_1 : bool;
    nr_St_1_REVERSE : bool; ns_St_1_REVERSE_2 : bool;
    ns_St_1_REVERSE_1 : bool; direction_St_1_REVERSE : int;
    nr_St_1_TURN_RIGHT : bool; ns_St_1_TURN_RIGHT_2 : bool;
    ns_St_1_TURN_RIGHT_1 : bool; direction_St_1_TURN_RIGHT : int;
    nr_St_1_TURN_LEFT : bool; ns_St_1_TURN_LEFT_2 : bool;
    ns_St_1_TURN_LEFT_1 : bool; direction_St_1_TURN_LEFT : int;
    nr_St_1_AHEAD : bool; ns_St_1_AHEAD_2 : bool; ns_St_1_AHEAD_1 : bool;
    direction_St_1_AHEAD : int; ck_2_2 : bool; ck_2_1 : bool;
    v_26_2_0 : bool; v_26_2_1 : bool; v_24_2_0 : bool; v_24_2_1 : bool;
    v_27 : bool; v_26_2 : bool; v_26_1 : bool; v_25 : bool; v_24_2 : bool;
    v_24_1 : bool; v_23 : bool; v_22 : bool; v_21 : bool; v_20 : bool;
    v_19 : bool; v_18 : bool; v_17 : bool; v_16 : bool; v_15 : bool;
    v_13_2_0 : bool; v_13_2_1 : bool; v_11_2_0 : bool; v_11_2_1 : bool;
    v_14 : bool; v_13_2 : bool; v_13_1 : bool; v_12 : bool; v_11_2 : bool;
    v_11_1 : bool; v_10 : bool; v_8_2_0 : bool; v_8_2_1 : bool;
    v_6_2_0 : bool; v_6_2_1 : bool; v_9 : bool; v_8_2 : bool; v_8_1 : bool;
    v_7 : bool; v_6_2 : bool; v_6_1 : bool; v_5 : bool; v_3_2_0 : bool;
    v_3_2_1 : bool; v_2_1_0 : bool; v_2_1_1 : bool; v_4 : bool; v_3_2 : bool;
    v_3_1 : bool; v_2 : bool; v_2_1 : bool; v_1 : bool; v_98 : bool;
    v_97 : bool; v_96 : bool; v_95 : bool; v_94 : bool; v_93 : bool;
    v_92 : bool; v_91 : bool; s_St_1_REVERSE_2_0 : bool;
    s_St_1_REVERSE_2_1 : bool; s_St_1_TURN_RIGHT_2_0 : bool;
    s_St_1_TURN_RIGHT_2_1 : bool; s_St_1_TURN_LEFT_2_0 : bool;
    s_St_1_TURN_LEFT_2_1 : bool; s_St_1_AHEAD_2_0 : bool;
    s_St_1_AHEAD_2_1 : bool; ck_2_3_0 : bool; ck_2_3_1 : bool;
    r_St_1_REVERSE : bool; s_St_1_REVERSE_2 : bool; s_St_1_REVERSE_1 : bool;
    r_St_1_TURN_RIGHT : bool; s_St_1_TURN_RIGHT_2 : bool;
    s_St_1_TURN_RIGHT_1 : bool; r_St_1_TURN_LEFT : bool;
    s_St_1_TURN_LEFT_2 : bool; s_St_1_TURN_LEFT_1 : bool;
    r_St_1_AHEAD : bool; s_St_1_AHEAD_2 : bool; s_St_1_AHEAD_1 : bool;
    ck_2_3 : bool; ck_1 : bool; s_2_0 : bool; s_2_1 : bool; ns_2_0 : bool;
    ns_2_1 : bool; s_2 : bool; s_1 : bool; ns_2 : bool; ns_1 : bool;
    r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  ck_2_2 = s_2;
  direction_St_1_AHEAD = 1;
  nr_St_1_AHEAD = false;
  ns_St_1_AHEAD_1 = true;
  ns_St_1_AHEAD_2 = true;
  direction_St_1_TURN_LEFT = 2;
  nr_St_1_TURN_LEFT = false;
  ns_St_1_TURN_LEFT_1 = false;
  ns_St_1_TURN_LEFT_2 = true;
  direction_St_1_TURN_RIGHT = 3;
  nr_St_1_TURN_RIGHT = false;
  ns_St_1_TURN_RIGHT_1 = false;
  ns_St_1_TURN_RIGHT_2 = false;
  direction_St_1_REVERSE = 4;
  nr_St_1_REVERSE = false;
  ns_St_1_REVERSE_1 = true;
  ns_St_1_REVERSE_2 = false;
  v_83 =
    merge ck_2_2_1
      (true -> direction_St_1_AHEAD)(false -> direction_St_1_REVERSE);
  v_84 =
    merge ck_2_2_0
      (true -> direction_St_1_TURN_LEFT)(false -> direction_St_1_TURN_RIGHT);
  direction = merge ck_2_1 (true -> v_83)(false -> v_84);
  v_85 = merge ck_2_2_1 (true -> ns_St_1_AHEAD_1)(false -> ns_St_1_REVERSE_1);
  v_86 = merge ck_2_2_1 (true -> ns_St_1_AHEAD_2)(false -> ns_St_1_REVERSE_2);
  v_87 =
    merge ck_2_2_0
      (true -> ns_St_1_TURN_LEFT_1)(false -> ns_St_1_TURN_RIGHT_1);
  v_88 =
    merge ck_2_2_0
      (true -> ns_St_1_TURN_LEFT_2)(false -> ns_St_1_TURN_RIGHT_2);
  ns_1 = merge ck_2_1 (true -> v_85)(false -> v_87);
  ns_2 = merge ck_2_1 (true -> v_86)(false -> v_88);
  v_89 = merge ck_2_2_1 (true -> nr_St_1_AHEAD)(false -> nr_St_1_REVERSE);
  v_90 =
    merge ck_2_2_0 (true -> nr_St_1_TURN_LEFT)(false -> nr_St_1_TURN_RIGHT);
  nr = merge ck_2_1 (true -> v_89)(false -> v_90);
  ck_2_2_1 = (ck_2_2 when true(ck_2_1));
  ck_2_2_0 = (ck_2_2 when false(ck_2_1));
  ns_St_1_AHEAD_2_1 = (ns_St_1_AHEAD_2 when true(ns_St_1_AHEAD_1));
  ns_St_1_AHEAD_2_0 = (ns_St_1_AHEAD_2 when false(ns_St_1_AHEAD_1));
  ns_St_1_TURN_LEFT_2_1 =
    (ns_St_1_TURN_LEFT_2 when true(ns_St_1_TURN_LEFT_1));
  ns_St_1_TURN_LEFT_2_0 =
    (ns_St_1_TURN_LEFT_2 when false(ns_St_1_TURN_LEFT_1));
  ns_St_1_TURN_RIGHT_2_1 =
    (ns_St_1_TURN_RIGHT_2 when true(ns_St_1_TURN_RIGHT_1));
  ns_St_1_TURN_RIGHT_2_0 =
    (ns_St_1_TURN_RIGHT_2 when false(ns_St_1_TURN_RIGHT_1));
  ns_St_1_REVERSE_2_1 = (ns_St_1_REVERSE_2 when true(ns_St_1_REVERSE_1));
  ns_St_1_REVERSE_2_0 = (ns_St_1_REVERSE_2 when false(ns_St_1_REVERSE_1));
  v_91 = true fby ns_1;
  v_92 = true fby ns_2;
  ck_1 = v_91;
  ck_2_3 = v_92;
  r_St_1_AHEAD = if v_15 then true else v_27;
  s_St_1_AHEAD_1 = if v_15 then true else v_26_1;
  s_St_1_AHEAD_2 = if v_15 then false else v_26_2;
  v_27 = if v_19 then true else v_25;
  v_26_1 = if v_19 then false else v_24_1;
  v_26_2 = if v_19 then false else v_24_2;
  v_25 = if v_23 then true else ((pnr when true(ck_1)) when true(ck_2_3_1));
  v_24_1 = if v_23 then false else true;
  v_24_2 = if v_23 then true else true;
  v_23 = (v_20 or v_22);
  v_22 = (v_21 & ((cntrl_dir_layer when true(ck_1)) when true(ck_2_3_1)));
  v_21 = (((direction_layer_2 when true(ck_1)) when true(ck_2_3_1)) = 2);
  v_20 = not(((cntrl_dir_left when true(ck_1)) when true(ck_2_3_1)));
  v_19 = (v_16 or v_18);
  v_18 = (v_17 & ((cntrl_dir_layer when true(ck_1)) when true(ck_2_3_1)));
  v_17 = (((direction_layer_2 when true(ck_1)) when true(ck_2_3_1)) = 3);
  v_16 = not(((cntrl_dir_right when true(ck_1)) when true(ck_2_3_1)));
  v_15 = not(((cntrl_dir_reverse when true(ck_1)) when true(ck_2_3_1)));
  v_24_2_1 = (v_24_2 when true(v_24_1));
  v_24_2_0 = (v_24_2 when false(v_24_1));
  v_26_2_1 = (v_26_2 when true(v_26_1));
  v_26_2_0 = (v_26_2 when false(v_26_1));
  r_St_1_TURN_LEFT =
    if ((cntrl_dir_left when false(ck_1)) when true(ck_2_3_0))
    then true
    else v_14;
  s_St_1_TURN_LEFT_1 =
    if ((cntrl_dir_left when false(ck_1)) when true(ck_2_3_0))
    then true
    else v_13_1;
  s_St_1_TURN_LEFT_2 =
    if ((cntrl_dir_left when false(ck_1)) when true(ck_2_3_0))
    then true
    else v_13_2;
  v_14 =
    if ((cntrl_dir_right when false(ck_1)) when true(ck_2_3_0))
    then true
    else v_12;
  v_13_1 =
    if ((cntrl_dir_right when false(ck_1)) when true(ck_2_3_0))
    then false
    else v_11_1;
  v_13_2 =
    if ((cntrl_dir_right when false(ck_1)) when true(ck_2_3_0))
    then false
    else v_11_2;
  v_12 = if v_10 then true else ((pnr when false(ck_1)) when true(ck_2_3_0));
  v_11_1 = if v_10 then true else false;
  v_11_2 = if v_10 then false else true;
  v_10 = not(((cntrl_dir_reverse when false(ck_1)) when true(ck_2_3_0)));
  v_11_2_1 = (v_11_2 when true(v_11_1));
  v_11_2_0 = (v_11_2 when false(v_11_1));
  v_13_2_1 = (v_13_2 when true(v_13_1));
  v_13_2_0 = (v_13_2 when false(v_13_1));
  r_St_1_TURN_RIGHT =
    if ((cntrl_dir_right when false(ck_1)) when false(ck_2_3_0))
    then true
    else v_9;
  s_St_1_TURN_RIGHT_1 =
    if ((cntrl_dir_right when false(ck_1)) when false(ck_2_3_0))
    then true
    else v_8_1;
  s_St_1_TURN_RIGHT_2 =
    if ((cntrl_dir_right when false(ck_1)) when false(ck_2_3_0))
    then true
    else v_8_2;
  v_9 =
    if ((cntrl_dir_left when false(ck_1)) when false(ck_2_3_0))
    then true
    else v_7;
  v_8_1 =
    if ((cntrl_dir_left when false(ck_1)) when false(ck_2_3_0))
    then false
    else v_6_1;
  v_8_2 =
    if ((cntrl_dir_left when false(ck_1)) when false(ck_2_3_0))
    then true
    else v_6_2;
  v_7 = if v_5 then true else ((pnr when false(ck_1)) when false(ck_2_3_0));
  v_6_1 = if v_5 then true else false;
  v_6_2 = if v_5 then false else false;
  v_5 = not(((cntrl_dir_reverse when false(ck_1)) when false(ck_2_3_0)));
  v_6_2_1 = (v_6_2 when true(v_6_1));
  v_6_2_0 = (v_6_2 when false(v_6_1));
  v_8_2_1 = (v_8_2 when true(v_8_1));
  v_8_2_0 = (v_8_2 when false(v_8_1));
  r_St_1_REVERSE =
    if ((cntrl_dir_reverse when true(ck_1)) when false(ck_2_3_1))
    then true
    else v_4;
  s_St_1_REVERSE_1 =
    if ((cntrl_dir_reverse when true(ck_1)) when false(ck_2_3_1))
    then true
    else v_3_1;
  s_St_1_REVERSE_2 =
    if ((cntrl_dir_reverse when true(ck_1)) when false(ck_2_3_1))
    then true
    else v_3_2;
  v_4 =
    if ((cntrl_dir_left when true(ck_1)) when false(ck_2_3_1))
    then true
    else v_2;
  v_3_1 =
    if ((cntrl_dir_left when true(ck_1)) when false(ck_2_3_1))
    then false
    else v_1;
  v_3_2 =
    if ((cntrl_dir_left when true(ck_1)) when false(ck_2_3_1))
    then true
    else v_2_1;
  v_2 =
    if ((cntrl_dir_right when true(ck_1)) when false(ck_2_3_1))
    then true
    else ((pnr when true(ck_1)) when false(ck_2_3_1));
  v_1 =
    if ((cntrl_dir_right when true(ck_1)) when false(ck_2_3_1))
    then false
    else true;
  v_2_1 =
    if ((cntrl_dir_right when true(ck_1)) when false(ck_2_3_1))
    then false
    else false;
  v_2_1_1 = (v_2_1 when true(v_1));
  v_2_1_0 = (v_2_1 when false(v_1));
  v_3_2_1 = (v_3_2 when true(v_3_1));
  v_3_2_0 = (v_3_2 when false(v_3_1));
  v_93 = merge ck_2_3_1 (true -> s_St_1_AHEAD_1)(false -> s_St_1_REVERSE_1);
  v_94 = merge ck_2_3_1 (true -> s_St_1_AHEAD_2)(false -> s_St_1_REVERSE_2);
  v_95 =
    merge ck_2_3_0 (true -> s_St_1_TURN_LEFT_1)(false -> s_St_1_TURN_RIGHT_1);
  v_96 =
    merge ck_2_3_0 (true -> s_St_1_TURN_LEFT_2)(false -> s_St_1_TURN_RIGHT_2);
  s_1 = merge ck_1 (true -> v_93)(false -> v_95);
  s_2 = merge ck_1 (true -> v_94)(false -> v_96);
  v_97 = merge ck_2_3_1 (true -> r_St_1_AHEAD)(false -> r_St_1_REVERSE);
  v_98 =
    merge ck_2_3_0 (true -> r_St_1_TURN_LEFT)(false -> r_St_1_TURN_RIGHT);
  r = merge ck_1 (true -> v_97)(false -> v_98);
  ck_2_3_1 = (ck_2_3 when true(ck_1));
  ck_2_3_0 = (ck_2_3 when false(ck_1));
  s_St_1_AHEAD_2_1 = (s_St_1_AHEAD_2 when true(s_St_1_AHEAD_1));
  s_St_1_AHEAD_2_0 = (s_St_1_AHEAD_2 when false(s_St_1_AHEAD_1));
  s_St_1_TURN_LEFT_2_1 = (s_St_1_TURN_LEFT_2 when true(s_St_1_TURN_LEFT_1));
  s_St_1_TURN_LEFT_2_0 = (s_St_1_TURN_LEFT_2 when false(s_St_1_TURN_LEFT_1));
  s_St_1_TURN_RIGHT_2_1 =
    (s_St_1_TURN_RIGHT_2 when true(s_St_1_TURN_RIGHT_1));
  s_St_1_TURN_RIGHT_2_0 =
    (s_St_1_TURN_RIGHT_2 when false(s_St_1_TURN_RIGHT_1));
  s_St_1_REVERSE_2_1 = (s_St_1_REVERSE_2 when true(s_St_1_REVERSE_1));
  s_St_1_REVERSE_2_0 = (s_St_1_REVERSE_2 when false(s_St_1_REVERSE_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node dc(direction_layer_1 : int; direction_layer_2 : int)
returns (equals : bool)
var nr_St_2_NOT_EQUALS : bool; ns_St_2_NOT_EQUALS_1 : bool;
    equals_St_2_NOT_EQUALS : bool; nr_St_2_EQUALS : bool;
    ns_St_2_EQUALS_1 : bool; equals_St_2_EQUALS : bool; ck_3_1 : bool;
    v_33 : bool; v_32 : bool; v_31 : bool; v_30 : bool; v_29 : bool;
    v_28 : bool; v : bool; r_St_2_NOT_EQUALS : bool;
    s_St_2_NOT_EQUALS_1 : bool; r_St_2_EQUALS : bool; s_St_2_EQUALS_1 : bool;
    ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_3_1 = s_1;
  equals_St_2_EQUALS = true;
  nr_St_2_EQUALS = false;
  ns_St_2_EQUALS_1 = true;
  equals_St_2_NOT_EQUALS = false;
  nr_St_2_NOT_EQUALS = false;
  ns_St_2_NOT_EQUALS_1 = false;
  equals =
    merge ck_3_1
      (true -> equals_St_2_EQUALS)(false -> equals_St_2_NOT_EQUALS);
  ns_1 =
    merge ck_3_1 (true -> ns_St_2_EQUALS_1)(false -> ns_St_2_NOT_EQUALS_1);
  nr = merge ck_3_1 (true -> nr_St_2_EQUALS)(false -> nr_St_2_NOT_EQUALS);
  ck_1 = true fby ns_1;
  r_St_2_EQUALS = if v_33 then true else (pnr when true(ck_1));
  s_St_2_EQUALS_1 = if v_33 then false else true;
  v_33 = (v_31 or v_32);
  v_32 =
    ((direction_layer_1 when true(ck_1)) >
     (direction_layer_2 when true(ck_1)));
  v_31 =
    ((direction_layer_1 when true(ck_1)) <
     (direction_layer_2 when true(ck_1)));
  r_St_2_NOT_EQUALS = if v_30 then true else (pnr when false(ck_1));
  s_St_2_NOT_EQUALS_1 = if v_30 then true else false;
  v_30 = not(v_29);
  v_29 = (v & v_28);
  v_28 =
    ((direction_layer_2 when false(ck_1)) >
     (direction_layer_1 when false(ck_1)));
  v =
    ((direction_layer_1 when false(ck_1)) <
     (direction_layer_2 when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_2_EQUALS_1)(false -> s_St_2_NOT_EQUALS_1);
  r = merge ck_1 (true -> r_St_2_EQUALS)(false -> r_St_2_NOT_EQUALS)
tel

node controller(distance_left : int; distance_right : int;
                 direction_layer_2 : int)
returns (obs_left : bool; obs_right : bool; direction_layer_1 : int)
contract
  var rule4 : bool; rule3 : bool; rule2 : bool; rule1 : bool; v : bool;
      v_34 : bool; v_35 : bool; v_36 : bool; v_37 : bool; v_38 : bool;
      v_39 : bool; v_40 : bool; v_41 : bool; v_42 : bool; v_43 : bool;
      v_44 : bool; v_45 : bool; v_46 : bool; v_47 : bool; v_48 : bool;
      v_49 : bool; v_50 : bool; v_51 : bool;
  let
    v = not(obs_left);
    v_34 = not(obs_right);
    v_35 = (v & v_34);
    v_36 = not(v_35);
    v_37 = (direction_layer_1 >= 1);
    rule4 = (v_36 or v_37);
    v_38 = not(obs_left);
    v_39 = (v_38 & obs_right);
    v_40 = not(v_39);
    v_41 = (direction_layer_1 = 2);
    rule3 = (v_40 or v_41);
    v_42 = not(obs_right);
    v_43 = (obs_left & v_42);
    v_44 = not(v_43);
    v_45 = (direction_layer_1 = 3);
    rule2 = (v_44 or v_45);
    v_46 = (obs_left & obs_right);
    v_47 = not(v_46);
    v_48 = (direction_layer_1 = 4);
    rule1 = (v_47 or v_48);
    v_49 = (rule1 & rule2);
    v_50 = (v_49 & rule3);
    v_51 = (v_50 & rule4)
  tel
  assume true@ enforce v_51]
                 with (cntrl_dir_reverse : bool; cntrl_dir_right : bool;
                        cntrl_dir_left : bool; cntrl_dir_layer : bool)
                 var v_106 : bool; v_105 : bool; v_104 : bool; v_103 : bool;
                     v_102 : bool; v_101 : bool; v_100 : int; v_99 : int;
                     ns_St_3_REVERSE_2_0 : bool; ns_St_3_REVERSE_2_1 : bool;
                     ns_St_3_TURN_RIGHT_2_0 : bool;
                     ns_St_3_TURN_RIGHT_2_1 : bool;
                     ns_St_3_TURN_LEFT_2_0 : bool;
                     ns_St_3_TURN_LEFT_2_1 : bool; ns_St_3_AHEAD_2_0 : bool;
                     ns_St_3_AHEAD_2_1 : bool; ck_8_2_0 : bool;
                     ck_8_2_1 : bool; nr_St_3_REVERSE : bool;
                     ns_St_3_REVERSE_2 : bool; ns_St_3_REVERSE_1 : bool;
                     direction_St_3_REVERSE : int; nr_St_3_TURN_RIGHT : bool;
                     ns_St_3_TURN_RIGHT_2 : bool;
                     ns_St_3_TURN_RIGHT_1 : bool;
                     direction_St_3_TURN_RIGHT : int;
                     nr_St_3_TURN_LEFT : bool; ns_St_3_TURN_LEFT_2 : bool;
                     ns_St_3_TURN_LEFT_1 : bool;
                     direction_St_3_TURN_LEFT : int; nr_St_3_AHEAD : bool;
                     ns_St_3_AHEAD_2 : bool; ns_St_3_AHEAD_1 : bool;
                     direction_St_3_AHEAD : int; ck_8_2 : bool;
                     ck_8_1 : bool; v_81_2_0 : bool; v_81_2_1 : bool;
                     v_79_2_0 : bool; v_79_2_1 : bool; v_82 : bool;
                     v_81_2 : bool; v_81_1 : bool; v_80 : bool;
                     v_79_2 : bool; v_79_1 : bool; v_78 : bool; v_77 : bool;
                     v_76 : bool; v_75 : bool; v_74 : bool; v_73 : bool;
                     v_72 : bool; v_71 : bool; v_70 : bool; v_68_2_0 : bool;
                     v_68_2_1 : bool; v_66_2_0 : bool; v_66_2_1 : bool;
                     v_69 : bool; v_68_2 : bool; v_68_1 : bool; v_67 : bool;
                     v_66_2 : bool; v_66_1 : bool; v_65 : bool;
                     v_63_2_0 : bool; v_63_2_1 : bool; v_61_2_0 : bool;
                     v_61_2_1 : bool; v_64 : bool; v_63_2 : bool;
                     v_63_1 : bool; v_62 : bool; v_61_2 : bool;
                     v_61_1 : bool; v_60 : bool; v_58_2_0 : bool;
                     v_58_2_1 : bool; v_56_2_0 : bool; v_56_2_1 : bool;
                     v_59 : bool; v_58_2 : bool; v_58_1 : bool; v_57 : bool;
                     v_56_2 : bool; v_56_1 : bool; v_114 : bool;
                     v_113 : bool; v_112 : bool; v_111 : bool; v_110 : bool;
                     v_109 : bool; v_108 : bool; v_107 : bool;
                     s_St_3_REVERSE_2_0 : bool; s_St_3_REVERSE_2_1 : bool;
                     s_St_3_TURN_RIGHT_2_0 : bool;
                     s_St_3_TURN_RIGHT_2_1 : bool;
                     s_St_3_TURN_LEFT_2_0 : bool;
                     s_St_3_TURN_LEFT_2_1 : bool; s_St_3_AHEAD_2_0 : bool;
                     s_St_3_AHEAD_2_1 : bool; ck_7_2_0 : bool;
                     ck_7_2_1 : bool; r_St_3_REVERSE : bool;
                     s_St_3_REVERSE_2 : bool; s_St_3_REVERSE_1 : bool;
                     r_St_3_TURN_RIGHT : bool; s_St_3_TURN_RIGHT_2 : bool;
                     s_St_3_TURN_RIGHT_1 : bool; r_St_3_TURN_LEFT : bool;
                     s_St_3_TURN_LEFT_2 : bool; s_St_3_TURN_LEFT_1 : bool;
                     r_St_3_AHEAD : bool; s_St_3_AHEAD_2 : bool;
                     s_St_3_AHEAD_1 : bool; ck_7_2 : bool; ck_7_1 : bool;
                     nr_1_St_4_NO_OBSTACLE : bool;
                     ns_1_St_4_NO_OBSTACLE_1 : bool;
                     obs_1_St_4_NO_OBSTACLE : bool;
                     nr_1_St_4_OBSTACLE : bool; ns_1_St_4_OBSTACLE_1 : bool;
                     obs_1_St_4_OBSTACLE : bool; ck_6_1 : bool; v_55 : bool;
                     v_54 : bool; r_1_St_4_NO_OBSTACLE : bool;
                     s_1_St_4_NO_OBSTACLE_1 : bool; r_1_St_4_OBSTACLE : bool;
                     s_1_St_4_OBSTACLE_1 : bool; ck_5_1 : bool;
                     nr_2_St_5_NO_OBSTACLE : bool;
                     ns_2_St_5_NO_OBSTACLE_1 : bool;
                     obs_St_5_NO_OBSTACLE : bool; nr_2_St_5_OBSTACLE : bool;
                     ns_2_St_5_OBSTACLE_1 : bool; obs_St_5_OBSTACLE : bool;
                     ck_4_1 : bool; v_53 : bool; v_52 : bool;
                     r_2_St_5_NO_OBSTACLE : bool;
                     s_2_St_5_NO_OBSTACLE_1 : bool; r_2_St_5_OBSTACLE : bool;
                     s_2_St_5_OBSTACLE_1 : bool; ck_1 : bool; s_2_2_0 : bool;
                     s_2_2_1 : bool; ns_2_2_0 : bool; ns_2_2_1 : bool;
                     s_2_1 : bool; ns_2_1 : bool; r_2 : bool; nr_2 : bool;
                     pnr_2 : bool; s_1_1 : bool; ns_1_1 : bool; r_1 : bool;
                     nr_1 : bool; pnr_1 : bool; s_2_2 : bool; s_1_2 : bool;
                     ns_2_2 : bool; ns_1_2 : bool; r : bool; nr : bool;
                     pnr : bool; cntrl_dir_left_1 : bool;
                     cntrl_dir_right_1 : bool; cntrl_dir_reverse_1 : bool;
                     cntrl_dir_layer_1 : bool; direction_layer_2_1 : int;
                     direction : int; dist_1 : int; obs_1 : bool; dist : int;
                     obs : bool;
  let
    cntrl_dir_left_1 = cntrl_dir_left;
    cntrl_dir_right_1 = cntrl_dir_right;
    cntrl_dir_reverse_1 = cntrl_dir_reverse;
    cntrl_dir_layer_1 = cntrl_dir_layer;
    direction_layer_2_1 = direction_layer_2;
    pnr = false fby nr;
    ck_8_1 = s_1_2;
    ck_8_2 = s_2_2;
    direction_St_3_AHEAD = 1;
    nr_St_3_AHEAD = false;
    ns_St_3_AHEAD_1 = true;
    ns_St_3_AHEAD_2 = true;
    direction_St_3_TURN_LEFT = 2;
    nr_St_3_TURN_LEFT = false;
    ns_St_3_TURN_LEFT_1 = false;
    ns_St_3_TURN_LEFT_2 = true;
    direction_St_3_TURN_RIGHT = 3;
    nr_St_3_TURN_RIGHT = false;
    ns_St_3_TURN_RIGHT_1 = false;
    ns_St_3_TURN_RIGHT_2 = false;
    direction_St_3_REVERSE = 4;
    nr_St_3_REVERSE = false;
    ns_St_3_REVERSE_1 = true;
    ns_St_3_REVERSE_2 = false;
    v_99 =
      merge ck_8_2_1
        (true -> direction_St_3_AHEAD)(false -> direction_St_3_REVERSE);
    v_100 =
      merge ck_8_2_0
        (true -> direction_St_3_TURN_LEFT)
        (false -> direction_St_3_TURN_RIGHT);
    direction = merge ck_8_1 (true -> v_99)(false -> v_100);
    v_101 =
      merge ck_8_2_1 (true -> ns_St_3_AHEAD_1)(false -> ns_St_3_REVERSE_1);
    v_102 =
      merge ck_8_2_1 (true -> ns_St_3_AHEAD_2)(false -> ns_St_3_REVERSE_2);
    v_103 =
      merge ck_8_2_0
        (true -> ns_St_3_TURN_LEFT_1)(false -> ns_St_3_TURN_RIGHT_1);
    v_104 =
      merge ck_8_2_0
        (true -> ns_St_3_TURN_LEFT_2)(false -> ns_St_3_TURN_RIGHT_2);
    ns_1_2 = merge ck_8_1 (true -> v_101)(false -> v_103);
    ns_2_2 = merge ck_8_1 (true -> v_102)(false -> v_104);
    v_105 = merge ck_8_2_1 (true -> nr_St_3_AHEAD)(false -> nr_St_3_REVERSE);
    v_106 =
      merge ck_8_2_0 (true -> nr_St_3_TURN_LEFT)(false -> nr_St_3_TURN_RIGHT);
    nr = merge ck_8_1 (true -> v_105)(false -> v_106);
    ck_8_2_1 = (ck_8_2 when true(ck_8_1));
    ck_8_2_0 = (ck_8_2 when false(ck_8_1));
    ns_St_3_AHEAD_2_1 = (ns_St_3_AHEAD_2 when true(ns_St_3_AHEAD_1));
    ns_St_3_AHEAD_2_0 = (ns_St_3_AHEAD_2 when false(ns_St_3_AHEAD_1));
    ns_St_3_TURN_LEFT_2_1 =
      (ns_St_3_TURN_LEFT_2 when true(ns_St_3_TURN_LEFT_1));
    ns_St_3_TURN_LEFT_2_0 =
      (ns_St_3_TURN_LEFT_2 when false(ns_St_3_TURN_LEFT_1));
    ns_St_3_TURN_RIGHT_2_1 =
      (ns_St_3_TURN_RIGHT_2 when true(ns_St_3_TURN_RIGHT_1));
    ns_St_3_TURN_RIGHT_2_0 =
      (ns_St_3_TURN_RIGHT_2 when false(ns_St_3_TURN_RIGHT_1));
    ns_St_3_REVERSE_2_1 = (ns_St_3_REVERSE_2 when true(ns_St_3_REVERSE_1));
    ns_St_3_REVERSE_2_0 = (ns_St_3_REVERSE_2 when false(ns_St_3_REVERSE_1));
    v_107 = true fby ns_1_2;
    v_108 = true fby ns_2_2;
    ck_7_1 = v_107;
    ck_7_2 = v_108;
    r_St_3_AHEAD = if v_70 then true else v_82;
    s_St_3_AHEAD_1 = if v_70 then true else v_81_1;
    s_St_3_AHEAD_2 = if v_70 then false else v_81_2;
    v_82 = if v_74 then true else v_80;
    v_81_1 = if v_74 then false else v_79_1;
    v_81_2 = if v_74 then false else v_79_2;
    v_80 =
      if v_78 then true else ((pnr when true(ck_7_1)) when true(ck_7_2_1));
    v_79_1 = if v_78 then false else true;
    v_79_2 = if v_78 then true else true;
    v_78 = (v_75 or v_77);
    v_77 =
      (v_76 & ((cntrl_dir_layer_1 when true(ck_7_1)) when true(ck_7_2_1)));
    v_76 =
      (((direction_layer_2_1 when true(ck_7_1)) when true(ck_7_2_1)) = 2);
    v_75 = not(((cntrl_dir_left_1 when true(ck_7_1)) when true(ck_7_2_1)));
    v_74 = (v_71 or v_73);
    v_73 =
      (v_72 & ((cntrl_dir_layer_1 when true(ck_7_1)) when true(ck_7_2_1)));
    v_72 =
      (((direction_layer_2_1 when true(ck_7_1)) when true(ck_7_2_1)) = 3);
    v_71 = not(((cntrl_dir_right_1 when true(ck_7_1)) when true(ck_7_2_1)));
    v_70 = not(((cntrl_dir_reverse_1 when true(ck_7_1)) when true(ck_7_2_1)));
    v_79_2_1 = (v_79_2 when true(v_79_1));
    v_79_2_0 = (v_79_2 when false(v_79_1));
    v_81_2_1 = (v_81_2 when true(v_81_1));
    v_81_2_0 = (v_81_2 when false(v_81_1));
    r_St_3_TURN_LEFT =
      if ((cntrl_dir_left_1 when false(ck_7_1)) when true(ck_7_2_0))
      then true
      else v_69;
    s_St_3_TURN_LEFT_1 =
      if ((cntrl_dir_left_1 when false(ck_7_1)) when true(ck_7_2_0))
      then true
      else v_68_1;
    s_St_3_TURN_LEFT_2 =
      if ((cntrl_dir_left_1 when false(ck_7_1)) when true(ck_7_2_0))
      then true
      else v_68_2;
    v_69 =
      if ((cntrl_dir_right_1 when false(ck_7_1)) when true(ck_7_2_0))
      then true
      else v_67;
    v_68_1 =
      if ((cntrl_dir_right_1 when false(ck_7_1)) when true(ck_7_2_0))
      then false
      else v_66_1;
    v_68_2 =
      if ((cntrl_dir_right_1 when false(ck_7_1)) when true(ck_7_2_0))
      then false
      else v_66_2;
    v_67 =
      if v_65 then true else ((pnr when false(ck_7_1)) when true(ck_7_2_0));
    v_66_1 = if v_65 then true else false;
    v_66_2 = if v_65 then false else true;
    v_65 =
      not(((cntrl_dir_reverse_1 when false(ck_7_1)) when true(ck_7_2_0)));
    v_66_2_1 = (v_66_2 when true(v_66_1));
    v_66_2_0 = (v_66_2 when false(v_66_1));
    v_68_2_1 = (v_68_2 when true(v_68_1));
    v_68_2_0 = (v_68_2 when false(v_68_1));
    r_St_3_TURN_RIGHT =
      if ((cntrl_dir_right_1 when false(ck_7_1)) when false(ck_7_2_0))
      then true
      else v_64;
    s_St_3_TURN_RIGHT_1 =
      if ((cntrl_dir_right_1 when false(ck_7_1)) when false(ck_7_2_0))
      then true
      else v_63_1;
    s_St_3_TURN_RIGHT_2 =
      if ((cntrl_dir_right_1 when false(ck_7_1)) when false(ck_7_2_0))
      then true
      else v_63_2;
    v_64 =
      if ((cntrl_dir_left_1 when false(ck_7_1)) when false(ck_7_2_0))
      then true
      else v_62;
    v_63_1 =
      if ((cntrl_dir_left_1 when false(ck_7_1)) when false(ck_7_2_0))
      then false
      else v_61_1;
    v_63_2 =
      if ((cntrl_dir_left_1 when false(ck_7_1)) when false(ck_7_2_0))
      then true
      else v_61_2;
    v_62 =
      if v_60 then true else ((pnr when false(ck_7_1)) when false(ck_7_2_0));
    v_61_1 = if v_60 then true else false;
    v_61_2 = if v_60 then false else false;
    v_60 =
      not(((cntrl_dir_reverse_1 when false(ck_7_1)) when false(ck_7_2_0)));
    v_61_2_1 = (v_61_2 when true(v_61_1));
    v_61_2_0 = (v_61_2 when false(v_61_1));
    v_63_2_1 = (v_63_2 when true(v_63_1));
    v_63_2_0 = (v_63_2 when false(v_63_1));
    r_St_3_REVERSE =
      if ((cntrl_dir_reverse_1 when true(ck_7_1)) when false(ck_7_2_1))
      then true
      else v_59;
    s_St_3_REVERSE_1 =
      if ((cntrl_dir_reverse_1 when true(ck_7_1)) when false(ck_7_2_1))
      then true
      else v_58_1;
    s_St_3_REVERSE_2 =
      if ((cntrl_dir_reverse_1 when true(ck_7_1)) when false(ck_7_2_1))
      then true
      else v_58_2;
    v_59 =
      if ((cntrl_dir_left_1 when true(ck_7_1)) when false(ck_7_2_1))
      then true
      else v_57;
    v_58_1 =
      if ((cntrl_dir_left_1 when true(ck_7_1)) when false(ck_7_2_1))
      then false
      else v_56_1;
    v_58_2 =
      if ((cntrl_dir_left_1 when true(ck_7_1)) when false(ck_7_2_1))
      then true
      else v_56_2;
    v_57 =
      if ((cntrl_dir_right_1 when true(ck_7_1)) when false(ck_7_2_1))
      then true
      else ((pnr when true(ck_7_1)) when false(ck_7_2_1));
    v_56_1 =
      if ((cntrl_dir_right_1 when true(ck_7_1)) when false(ck_7_2_1))
      then false
      else true;
    v_56_2 =
      if ((cntrl_dir_right_1 when true(ck_7_1)) when false(ck_7_2_1))
      then false
      else false;
    v_56_2_1 = (v_56_2 when true(v_56_1));
    v_56_2_0 = (v_56_2 when false(v_56_1));
    v_58_2_1 = (v_58_2 when true(v_58_1));
    v_58_2_0 = (v_58_2 when false(v_58_1));
    v_109 =
      merge ck_7_2_1 (true -> s_St_3_AHEAD_1)(false -> s_St_3_REVERSE_1);
    v_110 =
      merge ck_7_2_1 (true -> s_St_3_AHEAD_2)(false -> s_St_3_REVERSE_2);
    v_111 =
      merge ck_7_2_0
        (true -> s_St_3_TURN_LEFT_1)(false -> s_St_3_TURN_RIGHT_1);
    v_112 =
      merge ck_7_2_0
        (true -> s_St_3_TURN_LEFT_2)(false -> s_St_3_TURN_RIGHT_2);
    s_1_2 = merge ck_7_1 (true -> v_109)(false -> v_111);
    s_2_2 = merge ck_7_1 (true -> v_110)(false -> v_112);
    v_113 = merge ck_7_2_1 (true -> r_St_3_AHEAD)(false -> r_St_3_REVERSE);
    v_114 =
      merge ck_7_2_0 (true -> r_St_3_TURN_LEFT)(false -> r_St_3_TURN_RIGHT);
    r = merge ck_7_1 (true -> v_113)(false -> v_114);
    ck_7_2_1 = (ck_7_2 when true(ck_7_1));
    ck_7_2_0 = (ck_7_2 when false(ck_7_1));
    s_St_3_AHEAD_2_1 = (s_St_3_AHEAD_2 when true(s_St_3_AHEAD_1));
    s_St_3_AHEAD_2_0 = (s_St_3_AHEAD_2 when false(s_St_3_AHEAD_1));
    s_St_3_TURN_LEFT_2_1 = (s_St_3_TURN_LEFT_2 when true(s_St_3_TURN_LEFT_1));
    s_St_3_TURN_LEFT_2_0 =
      (s_St_3_TURN_LEFT_2 when false(s_St_3_TURN_LEFT_1));
    s_St_3_TURN_RIGHT_2_1 =
      (s_St_3_TURN_RIGHT_2 when true(s_St_3_TURN_RIGHT_1));
    s_St_3_TURN_RIGHT_2_0 =
      (s_St_3_TURN_RIGHT_2 when false(s_St_3_TURN_RIGHT_1));
    s_St_3_REVERSE_2_1 = (s_St_3_REVERSE_2 when true(s_St_3_REVERSE_1));
    s_St_3_REVERSE_2_0 = (s_St_3_REVERSE_2 when false(s_St_3_REVERSE_1));
    dist_1 = distance_right;
    pnr_1 = false fby nr_1;
    ck_6_1 = s_1_1;
    obs_1_St_4_OBSTACLE = true;
    nr_1_St_4_OBSTACLE = false;
    ns_1_St_4_OBSTACLE_1 = false;
    obs_1_St_4_NO_OBSTACLE = false;
    nr_1_St_4_NO_OBSTACLE = false;
    ns_1_St_4_NO_OBSTACLE_1 = true;
    obs_1 =
      merge ck_6_1
        (true -> obs_1_St_4_NO_OBSTACLE)(false -> obs_1_St_4_OBSTACLE);
    ns_1_1 =
      merge ck_6_1
        (true -> ns_1_St_4_NO_OBSTACLE_1)(false -> ns_1_St_4_OBSTACLE_1);
    nr_1 =
      merge ck_6_1
        (true -> nr_1_St_4_NO_OBSTACLE)(false -> nr_1_St_4_OBSTACLE);
    ck_5_1 = false fby ns_1_1;
    r_1_St_4_OBSTACLE = if v_55 then true else (pnr_1 when false(ck_5_1));
    s_1_St_4_OBSTACLE_1 = if v_55 then true else false;
    v_55 = ((dist_1 when false(ck_5_1)) > 45);
    r_1_St_4_NO_OBSTACLE = if v_54 then true else (pnr_1 when true(ck_5_1));
    s_1_St_4_NO_OBSTACLE_1 = if v_54 then false else true;
    v_54 = ((dist_1 when true(ck_5_1)) <= 45);
    s_1_1 =
      merge ck_5_1
        (true -> s_1_St_4_NO_OBSTACLE_1)(false -> s_1_St_4_OBSTACLE_1);
    r_1 =
      merge ck_5_1 (true -> r_1_St_4_NO_OBSTACLE)(false -> r_1_St_4_OBSTACLE);
    dist = distance_left;
    pnr_2 = false fby nr_2;
    ck_4_1 = s_2_1;
    obs_St_5_OBSTACLE = true;
    nr_2_St_5_OBSTACLE = false;
    ns_2_St_5_OBSTACLE_1 = false;
    obs_St_5_NO_OBSTACLE = false;
    nr_2_St_5_NO_OBSTACLE = false;
    ns_2_St_5_NO_OBSTACLE_1 = true;
    obs =
      merge ck_4_1 (true -> obs_St_5_NO_OBSTACLE)(false -> obs_St_5_OBSTACLE);
    ns_2_1 =
      merge ck_4_1
        (true -> ns_2_St_5_NO_OBSTACLE_1)(false -> ns_2_St_5_OBSTACLE_1);
    nr_2 =
      merge ck_4_1
        (true -> nr_2_St_5_NO_OBSTACLE)(false -> nr_2_St_5_OBSTACLE);
    ck_1 = false fby ns_2_1;
    r_2_St_5_OBSTACLE = if v_53 then true else (pnr_2 when false(ck_1));
    s_2_St_5_OBSTACLE_1 = if v_53 then true else false;
    v_53 = ((dist when false(ck_1)) > 45);
    r_2_St_5_NO_OBSTACLE = if v_52 then true else (pnr_2 when true(ck_1));
    s_2_St_5_NO_OBSTACLE_1 = if v_52 then false else true;
    v_52 = ((dist when true(ck_1)) <= 45);
    s_2_1 =
      merge ck_1
        (true -> s_2_St_5_NO_OBSTACLE_1)(false -> s_2_St_5_OBSTACLE_1);
    r_2 =
      merge ck_1 (true -> r_2_St_5_NO_OBSTACLE)(false -> r_2_St_5_OBSTACLE);
    obs_left = obs;
    obs_right = obs_1;
    direction_layer_1 = direction;
    ns_2_2_1 = (ns_2_2 when true(ns_1_2));
    ns_2_2_0 = (ns_2_2 when false(ns_1_2));
    s_2_2_1 = (s_2_2 when true(s_1_2));
    s_2_2_0 = (s_2_2 when false(s_1_2))
  tel

