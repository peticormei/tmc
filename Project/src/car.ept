(*
    until => executa o estado em que estÃ¡ e transiciona para outro estado
    unless => transiciona para outro estado e executa o novo estado
*)

node obstacle(dist: int) returns (obs: bool)
let 
	automaton
		state OBSTACLE do
			obs = true;
			unless (dist > 45) then NO_OBSTACLE
		state NO_OBSTACLE do
			obs = false;
			unless (dist <= 45) then OBSTACLE
	end
tel

node motor(event_dir: int; cntrl_turn: bool) returns (mode, velocity: int)
let
	automaton
		state FORWARD do
			mode = 1;
			velocity = 255;
			unless ((event_dir=2) or (not cntrl_turn)) then BACKWARD
		state BACKWARD do
			mode = 2;
			velocity = 255;
			unless ((event_dir=1) & cntrl_turn) then FORWARD
	end
tel

node controller(distance_left, distance_right, event_dir_left, event_dir_right: int) returns (obs_left, obs_right: bool; motor_mode_left, motor_mode_right, motor_speed_left, motor_speed_right: int)
contract
	var
		rule1, rule2, rule3: bool;
	let
		rule1 = not (obs_left & not (motor_mode_right=2)) or motor_mode_right=2;
		rule2 = not (obs_right & not (motor_mode_left=2)) or motor_mode_left=2;
		rule3 = not (obs_right & obs_left) or (motor_mode_left=2 & motor_mode_right=2); 
	tel
		enforce (rule1) & (rule2) & (rule3)
		with (cntrl_turn_l, cntrl_turn_r: bool)
	let
		obs_left = inlined obstacle(distance_left);
		(motor_mode_left, motor_speed_left) = inlined motor(event_dir_left, cntrl_turn_r);

		obs_right = inlined obstacle(distance_right);
		(motor_mode_right, motor_speed_right) = inlined motor(event_dir_right, cntrl_turn_l);
	tel